{"title":"Example of leaky abstraction","permalink":"/example-of-leaky-abstraction","post":{"title":"Example of leaky abstraction","language":"zh-tw","date":"2016-05-26T00:00:00.000Z","categories":"Diary","__content":"<p>Everytime we abstract a layer, some detail will be hidden. When there is some error or bug inside the abstraction layer, only the engineer understand the implementation of abstracted layer can fix it.</p>\n<p>Leaky abstraction is a necessary evil, here is some of my own experience.</p>\n<h2 id=\"githubapiandnpmrequestmodule\">Github API and npm 'request' module</h2>\n<p>I use npm 'request' module to query pull request of a private repo. I use the correct authetication method, but still fail to get data from the API.</p>\n<p>Here is the code copy from the example</p>\n<pre><code>request.get('http://some.server.com/', {\n  'auth': {\n    'user': 'username',\n    'pass': 'password',\n    'sendImmediately': false\n  }\n});\n</code></pre>\n<!-- more -->\n<h3 id=\"solution\">Solution</h3>\n<p>Set <code>sendImmediately</code> to <code>true</code>. </p>\n<p>If <code>sendImmediately</code> is <code>false</code>, the first will not have the authentication data. Only if the server reply a <code>401</code> response, another request with authentication data will be made. But Github API return <code>404</code> instead of <code>401</code> for the unauthenticated request, so it does not work.</p>\n<p>This bug can only be solved by the engineer who understand the <code>sendImmediately</code> option and the behaviour of Github API. By the way, unit test cannot catch this problem, as every individual parts are correct.</p>\n<h2 id=\"passingconsolelogintocallbackdoesnotwork\">Passing <code>console.log</code> into callback does not work</h2>\n<p>Sometime we want to test the return value of an asynchronus function, say <code>async(callback)</code>. We try to use <code>console.log</code> to echo the result directly. We may write some thing like this</p>\n<pre><code>async(console.log)\n</code></pre>\n<p>We expect it will output the result of async function, but it print nothing.</p>\n<h3 id=\"useasyncconsolelogbindconsole\">Use <code>async(console.log.bind(console))</code></h3>\n<p>In the implementation of <code>console.log</code>, <code>this</code> is used. So when we pass the <code>log</code> function to other callback, the <code>console</code> scope is lost, so the function does not work. The solution is to <code>bind</code> the <code>console</code> to the function. Only the engineer understand the implementation of <code>console.log</code> and properties of javascript can understand this problem.</p>\n<h2 id=\"callforexample\">Call for example</h2>\n<p>If you have similar experience, please put the problem and solution in the comment and share with us. :D</p>","filePath":"/Users/sunday/workspace/coding-sunday/source/_posts/diary/example-of-leaky-abstraction.md","slug":"example-of-leaky-abstraction"}}