{"title":"Functional utility library is good","date":"2016-04-18T23:01:24.000Z","categories":"Diary","__content":"<p>I refactor a report interface today. We have a new summary data, so i can simiplify the code on updating report cache.But we also have a new requirement, we want to show some expired data.</p>\n<p>So I have to:</p>\n<ol>\n<li>Update the new report cache workflow and structure</li>\n<li>Clean up deprecated code (some old and long query)</li>\n<li>Show the expired data in the report</li>\n</ol>\n<p>Task 1 and 2 are easy jobs, but the remote read-only database is quite slow. I speed up the develop and debug speed by using a mock input (hardcoding part of the query result instead of doing query everytime).</p>\n<p>Problems comes form Task 3, the context is a little bit complicated, let me explain here.</p>\n<!-- more -->\n<p>We have 2 databases for different purpose. The first database store the current data, which serve the client. The other store the history, which is for analytic purpose.</p>\n<p>Let me give an example to explain:\nSuppose we have three item, a = { currnet data }, b = { currnet data, analytic data }, c = { analytic data }.\nIn terms of set theory, set of current data C = { a, b }, set of analytic data A = { b, c }.</p>\n<p>The report was shown analytic result for current data. So I have something like this:</p>\n<pre><code>for each current data:\n    for each analytic data:\n        if the data is from the same item:\n            merge them\n</code></pre>\n<p>For the first version of report F, F = { a = { currnet data }, b = { currnet data, analytic data } }.</p>\n<p>For the new report, we also need to show the outdated data.\nBut I made a mistake, I implement the code like this:</p>\n<pre><code>for each analytic data:\n    for each current data:\n        if the data is from the same item:\n            merge them\n</code></pre>\n<p>This report M = { b = { currnet data, analytic data }, c = { analytic data } }.\nWe want to show all data, data from a is missing. So I did a stupid quick patch.</p>\n<pre><code>for each current data:\n    for each analytic data:\n        if the current data is not in analytic data set:\n            append to the report data\n</code></pre>\n<p>What I am doing for the whole piece of code is\nFirst patch: C merge ( C intersect A )\nSecond patch: A merge ( A intersect C )\nResult: first patch merge second patch, showing all data { a, b, c }.</p>\n<p>The code has a very low readability for the following reason:</p>\n<ol>\n<li>We can the see the whole scope of report data from first sight</li>\n<li>We have two set of nested for-loop, which is quite complex</li>\n</ol>\n<p>A better solution is</p>\n<pre><code>extract item key from current data\nextract item key from analytic data\nunion two set of keys\nfor each key:\n    // find data and fill populate the item\n    for each current data:\n        if current data key = item key\n            merge\n    for each analytic data:\n        if analytic data key = item key\n            merge\n</code></pre>\n<p>It is much more beautiful.\nThe extract key function can be reused.\nThe for-loop part can also be reused.</p>\n<h1 id=\"learning\">Learning</h1>\n<ol>\n<li>When doing data packing/restructuring, we should think about the data scope.</li>\n<li>Set theory can be a good tool when data visualization.</li>\n<li>Use functional utility function</li>\n</ol>\n<h1 id=\"whyineedfunctionalutilitylibrary\">Why I need functional utility library?</h1>\n<p>The pseudo code above is simple, but the code in php is verbose and annoying, I do a lot data packing stuff: setting data, checking data, pack them into arrays. It is really time-consuming to write glue code. Not changeling, only\nboring. When I realise I made a mistake, I almost have to rewrite all the code, so stupid.</p>\n<h1 id=\"howfunctionalutilitylibraryhelpus\">How functional utility library help us?</h1>\n<p>The library provides a large set of common and well integrated functions. It forces us to think about how to reuse the code, not writing lots of glue code. The code will be easier to read. As all function names have meaning, not a set of nameless for-loops waiting for you to interpretation.</p>\n<p>Also, the code is highly modulize. This lower the cost of correcting a mistake. What you need to do is probably just copy and paste, or modifying the parameter only.</p>\n<p>Therefore, I am going to introduce some functional utlity library into the repo. I find <a href=\"http://anahkiasen.github.io/underscore-php/\">underscore-php</a> looks good. I may spend some time to read the source code and learn to use it.</p>\n<p>PS: The documentation page is too pink...</p>","filePath":"/Users/sunday/workspace/coding-sunday/source/_posts/diary/functional-utility.md","slug":"functional-utility"}