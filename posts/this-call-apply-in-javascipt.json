{"title":"Javascript 中嘅 this, call 同 apply","date":"2016-05-23T00:00:00.000Z","categories":"Review","__content":"<p>Javascript lexical functional scope,姐係variable嘅lifespan係一個個function咁計，每當有一個新function，就有一個新嘅scope。\n另一個javascript嘅特點係first-class function姐係function可以係一個variable type，個function可以pass入第2個function，或姐一個function return另一個function.E一個特點令javascript好多時都會用到callback function E個pattern.</p>\n<p>以上2個特點加埋一齊就會出現一D麻煩。</p>\n<!-- more -->\n<p>例如callback function入邊個<code>this</code>有時會唔小心指左去第2個scope。</p>\n<pre><code>app.name = 'my app'\napp.getUsers = function( callback ){\n  $.get( '/users/', function( data ){\n    callback &amp;&amp; callback( this, data );\n  });\n};\n\napp.getUsers(function countUser(data){\n  console.log('There are ' + data.length + ' users using ' + this.name);\n})\n</code></pre>\n<p>以上果段code個this就會指左去jQuery個scope。當callback function入邊有用到<code>this</code>果時，咁就會有D unexpected behaviour出現。以上例子中嘅<code>this.name</code>會指左去<code>$.name</code>，而唔係<code>app.name</code>。</p>\n<p>有D人可能會諗</p>\n<blockquote>\n  <p>Callback果度用<code>app.name</code>唔好用<code>this.name</code>咪得囉。</p>\n</blockquote>\n<p>E個solution有2個缺點</p>\n<ol>\n<li>hardcode caller個variable name會少左flexibility。\n有時後個callback可以用係唔同地方，但係一要hardcode個caller variable入去，個callback就變左context specific，廢左武功，冇得reuse。咁當然可以用D wrapper 去fix E 個problem，但係就要寫好多boilerplate code，搞到段code好冗長。</li>\n<li>abstract唔到個function interface做一個API\n其實一個function已經係一個abstraction，當個user 入個callback去call你個function，佢suppose唔洗知你個function點implement。以上文為例，人地跟本唔知你用jQuery咁樣implement，唔知道用<code>this</code>會有bug。咁樣寫getUsers係做唔到一個public api。</li>\n</ol>\n<p>咁點樣寫先啱？個問題主要係function個scope冇清淅define，只要我地用一D native javascript function指定返個<code>this</code>就得。例如：</p>\n<pre><code>app.getUsers = function( callback ){\n  var self = this;\n  $.get( '/users/', function( data ){\n    callback &amp;&amp; callback.call( self, data );\n  });\n};\n</code></pre>\n<p><code>callback.call( self, data )</code> 第一個argument就係指定左個<code>this</code>係做<code>self</code>，姐係call緊<code>self.callback(data)</code>。\n又或者可以用<code>callback.apply( self, [data] )</code>，姐係call緊<code>self.callback(data[0], data[1], data[2] ...)</code>。\n都可以用<code>(callback.bind(self))(data)</code>，<code>bind</code>都係指定個this，但係佢唔會直接行個function，而係return一個bind左scope嘅function。</p>\n<h2 id=\"\">總結</h2>\n<ul>\n<li>當implement callback pattern，要記住留意this嘅binding。</li>\n<li>當要借其他object D method用，最好用call，apply或者bind，因為我地唔知人地點implement。</li>\n<li>如果只需要借人地D method用一次，直接用<code>call</code>或<code>apply</code>就得。如果唔係馬上call或者要用幾次，最好用<code>bind</code> create一個新function先。</li>\n</ul>\n<h2 id=\"-1\">參考</h2>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/First-class_function\">First-class function</a></li>\n<li><a href=\"http://dreamerslab.com/blog/tw/javascript-this/\">Javascript <code>this</code></a></li>\n<li><a href=\"http://dreamerslab.com/blog/tw/javascript-call-and-apply/\">Javascript call 以及 apply</a></li>\n<li><a href=\"http://stackoverflow.com/questions/15455009/javascript-call-apply-vs-bind\">Javascript call() & apply() vs bind()?</a></li>\n<li><a href=\"https://spin.atomicobject.com/2014/10/20/javascript-scope-closures/\">What You Should Already Know about JavaScript Scope</a></li>\n</ul>","filePath":"/Users/sunday/workspace/coding-sunday/source/_posts/review/this-call-apply-in-javascipt.md","slug":"this-call-apply-in-javascipt"}