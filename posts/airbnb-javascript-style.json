{"title":"Airbnb javascript style guide","date":"2016-05-29T00:00:00.000Z","categories":"Review","__content":"<p>I will pick some special rules and some rules i don't think it is useful here</p>\n<h2 id=\"objects\">Objects</h2>\n<h3 id=\"rule34defineallthepropertiesofanobjectinoneplace\">Rule 3.4: Define all the properties of an object in one place.</h3>\n<p>It is my common mistake. Don't add properties to object once it defined. It is easy for other to miss the properties.</p>\n<pre><code>function getKey(k) {\n  return `a key named ${k}`;\n}\n\n// bad\nconst obj = {\n  id: 5,\n  name: 'San Francisco',\n};\nobj[getKey('enabled')] = true;\n\n// good\nconst obj = {\n  id: 5,\n  name: 'San Francisco',\n  [getKey('enabled')]: true,\n};\n</code></pre>\n<!-- more -->\n<h3 id=\"rule38onlyquotepropertiesthatareinvalididentifiers\">Rule 3.8: Only quote properties that are invalid identifiers.</h3>\n<p>Airbnb think it is easier to read, improves syntax highlighting, and it is also more easily optimized by many JS engines.</p>\n<pre><code>// bad\nconst bad = {\n  'foo': 3,\n  'bar': 4,\n  'data-blah': 5,\n};\n\n// good\nconst good = {\n  foo: 3,\n  bar: 4,\n  'data-blah': 5,\n};\n</code></pre>\n<p>This rule is more useful for client side javascript, beacuse server side javascript do not need to be minifed. For consistency of among object properties and between server side and client side code, I perfer to abolish this rule.</p>\n<h3 id=\"rule61usesinglequotesforstrings\">Rule 6.1 Use single quotes for strings</h3>\n<p>It is useful when we use double quote in json string and html.</p>\n<h3 id=\"rule71usefunctiondeclarationsinsteadoffunctionexpressions\">Rule 7.1 Use function declarations instead of function expressions.</h3>\n<p>It is becuase function declarations are named, so they're easier to identify in call stacks. A useful debuggin skill when dealing with callback.</p>\n<h3 id=\"rule73neverdeclareafunctioninanonfunctionblockifwhileetc\">Rule 7.3 Never declare a function in a non-function block (if, while, etc).</h3>\n<p>Assign the function to a variable instead. Browsers will allow you to do it, but they all interpret it differently, which is bad news bears.</p>\n<h3 id=\"rule76neveruseargumentsopttouserestsyntaxinstead\">Rule 7.6 Never use <code>arguments</code>, opt to use rest syntax <code>...</code> instead.</h3>\n<p>It is becuase <code>...</code> is explicit about which arguments you want pulled. Plus, rest arguments are a real Array, and not merely Array-like like <code>arguments</code>.</p>\n<h3 id=\"rule7778712and713\">Rule 7.7, 7.8, 7.12 and 7.13</h3>\n<p>They are:</p>\n<ul>\n<li>Use default parameter syntax rather than mutating function arguments.</li>\n<li>Avoid side effects with default parameters.</li>\n<li>Never mutate parameters.</li>\n<li>Never reassign parameters.</li>\n</ul>\n<p>The idea is to keep the input parameter remain unchange and make the code have less unexpected behaviour.</p>\n<h3 id=\"rule93methodcanreturnthistohelpmethodchaining\">Rule 9.3 Method can return <code>this</code> to help method chaining</h3>\n<p>For the functions do not have value to return, we can return <code>this</code></p>\n<h3 id=\"rule94tostringmusthavenosideeffects\">Rule 9.4 <code>toString()</code> must have no side effects</h3>\n<p>It makes the code more difficult to debug, especially when we use <code>console.log()</code> to check the values.</p>\n<h3 id=\"rule105donotexportmutablebindings\">Rule 10.5 Do not export mutable bindings.</h3>\n<p>Make the behaviour of function consistance.</p>\n<h3 id=\"rule111dontuseiterators\">Rule 11.1 Don't use iterators</h3>\n<p>So we are easier to enforces the immutable rule</p>\n<h3 id=\"rule155usebracestocreateblocksincaseanddefaultclausesthatcontainlexicaldeclarations\">Rule 15.5 Use braces to create blocks in case and default clauses that contain lexical declarations</h3>\n<p>To prevent variable in different case mess up.</p>\n<h3 id=\"rule181usesofttabssetto2spaces\">Rule 18.1 Use soft tabs set to 2 spaces.</h3>\n<p>I perfer to use 4 spaces, 2 spaces is too tight.</p>\n<h3 id=\"rule225dontsavereferencestothisusearrowfunctionsorfunctionbind\">Rule 22.5 Don't save references to this. Use arrow functions or Function#bind.</h3>\n<h2 id=\"reference\">Reference</h2>\n<ul>\n<li><a href=\"https://github.com/airbnb/javascript\">Airbnb JavaScript Style Guide</a></li>\n</ul>","filePath":"/Users/sunday/workspace/coding-sunday/source/_posts/review/airbnb-javascript-style.md","slug":"airbnb-javascript-style"}