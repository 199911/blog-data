{"title":"文集十一","permalink":"/readings-11","post":{"title":"文集十一","language":"zh-tw","date":"2016-11-26T00:00:00.000Z","categories":"Insight","__content":"<h1 id=\"javascripthttpwwwinsidecomtw20160219javascriptnoviceadviceandlearningresources\"><a href=\"http://www.inside.com.tw/2016/02/19/javascript-novice-advice-and-learning-resources\">我要成為前端工程師！給 JavaScript 新手的建議與學習資源整理</a></h1>\n<ul>\n<li>當睇唔明人地D code</li>\n<li>查書<ul>\n<li>唔知要查嘅野係邊頁</li>\n<li>要先對成個知識體系有基本了解，先可以有效率咁search</li></ul></li>\n<li>查Google<ul>\n<li>唔知用咩keyword去search</li>\n<li>同查書一樣</li></ul></li>\n<li>試+靠估<ul>\n<li>可能會得出錯嘅結論，學左D錯嘅野</li></ul></li>\n<li>做住學</li>\n<li>要有觀念打底先扎實<ul>\n<li>都係要了解左成個知識體系先</li></ul></li>\n<li>我好同意E一點，要打好底咁先學到野。因為做野果時好多時都有deadline，一定要好有效率咁學，唔係最後係壓力下，只係patch到work就算，可唔到可以reuse嘅knowledge。</li>\n<li>會寫的多、看懂的少</li>\n<li>如果你還是用一知半解的觀念去開發，你會花上大把大把的時間在除錯、鬼打牆、生悶氣、捶心肝。<ul>\n<li>其實就係leaky abstraction 嘅問題</li>\n<li>當你要maintain D code，就算D third party library 好勁，好可靠，都要花時間去理解佢點運作。</li>\n<li>因為世上係冇完美嘅abstraction，當一遇到底層嘅問題，必需要對library有深入嘅了解先solve到。</li>\n<li>當出左事先抽時間去學，好可能會趕唔切，因為未必可以locate到個問題係邊個abstraction layer出事。</li></ul></li>\n<li>當中推介D書遲D抽時間速睇。</li>\n</ul>\n<!-- more -->\n<h1 id=\"httpwwwcodemudnetthinkergingin_cgipyshow_id_doc497\"><a href=\"http://www.codemud.net/~thinker/GinGin_CGI.py/show_id_doc/497\">閱讀程式碼的心理層面</a></h1>\n<p>講點樣睇code，其實好多篇文都講類似嘅野</p>\n<ol>\n<li>先掌握整體結構，了解各檔案、目錄、模組嘅作用</li>\n</ol>\n<ul>\n<li>咁先可以知道自己係邊個abstraction layer，<ul>\n<li>揾到自已想睇嘅code同skip D 唔重要嘅野</li></ul></li>\n</ul>\n<ol>\n<li>靠file, function 同 variable name去估D code做咩</li>\n</ol>\n<ul>\n<li>前提都要D code都要寫得好</li>\n</ul>\n<ol>\n<li>睇class 同 function declaration</li>\n</ol>\n<ul>\n<li>Interface 係這個abstraction object 之間溝通嘅方法</li>\n<li>睇完structure，估到個大約結構可以睇下 interface 驗證自己嘅想法</li>\n</ul>\n<ol>\n<li>先睇Data structure 再睇 code</li>\n</ol>\n<ul>\n<li>Code 係用黎process data, program 就好似一條變化緊嘅data stream咁，由stream嘅源頭，姐係data structure睇會易明D。</li>\n<li>但係當D code唔係用黎handle data就唔work，例如一D dev ops 嘅code</li>\n</ul>\n<ol>\n<li>睇人地嘅註解</li>\n</ol>\n<ul>\n<li>放到咁後係當有comment 果時己經去到睇 code 嘅level，未了解structure就睇code好易睇錯野。</li>\n</ul>\n<ol>\n<li>要focus，唔好心急跳黎睇</li>\n</ol>\n<ul>\n<li>未清楚曬就skip好易中伏，到最後仲用多左時間，</li>\n</ul>\n<h1 id=\"reflectionsofanoldprogrammerhttpwwwbennorthropcomessays2016reflectionsofanoldprogrammerphp\"><a href=\"http://www.bennorthrop.com/Essays/2016/reflections-of-an-old-programmer.php\">Reflections of an \"Old\" Programmer</a></h1>\n<ul>\n<li>Knowledge decay</li>\n<li>隨住科技嘅進步，好多舊嘅技術會慢慢fade out</li>\n<li>Knowledge accumulation rate</li>\n<li>學野嘅速度</li>\n<li>Three stages</li>\n<li>Eager apprentice<ul>\n<li>快速咁去學好多新嘅language, library 同 framework</li></ul></li>\n<li>Rising start<ul>\n<li>對現今流行嘅野都有掌握，開始精進</li>\n<li>開始面對轉折點</li>\n<li>成為左senior要教新人，review人地D code，少左時間自己學野</li>\n<li>D knowledge會開始decay，出現 accumulation rate &lt; decay rate 嘅情況</li></ul></li>\n<li>Steady veteran<ul>\n<li>要keep住用空閒時間學新野，唔係就會變返新手</li>\n<li>有人會決定轉去做management, sales, testing ... etc</li></ul></li>\n<li>Advice</li>\n<li>睇長線D<ul>\n<li>㨂D有得接觸新野嘅公司，寧可低pay D</li>\n<li>以防工作用嘅technology 第時decay曬</li></ul></li>\n<li>學decay level 低嘅knowledge<ul>\n<li>algorithms, application security, performance optimization, and architecture</li>\n<li>唔好不停去追新嘅libraries</li></ul></li>\n</ul>\n<h1 id=\"httpwwwplaypcesorcom201609lifehack18html\"><a href=\"http://www.playpcesor.com/2016/09/lifehack-18.html\">咖啡館師傅的啟示，如何正確跟他人學東西？</a></h1>\n<p>好多野都係context dependent，要睇情況同時機。所以學野唔係要學人地嘅經驗，唔係要學硬性嘅規則，而係學背後的邏輯、方法。咁先可以因應唔同嘅情況調整。</p>\n<h1 id=\"httpwwwcodemudnetthinkergingin_cgipyshow_id_doc493\"><a href=\"http://www.codemud.net/~thinker/GinGin_CGI.py/show_id_doc/493\">學徒之路</a></h1>\n<p>同上邊幾篇文都有D共通點</p>\n<ul>\n<li>基礎的知識、理論</li>\n<li>Decay rate 比較低嘅knowledge</li>\n<li>可以透過書本、文件、或別人的教導獲得</li>\n<li>經驗和應用類的知識</li>\n<li>Decay rate 高</li>\n<li>好似上一篇提及嘅學習方法咁<ul>\n<li>不該全盤接受別人的想法，特別是經驗</li>\n<li>可以引以為鑑，反省自己的做法和想法</li></ul></li>\n<li>例子<ul>\n<li>Design Pattern</li>\n<li>Test Driven Development</li>\n<li>Agile</li></ul></li>\n<li>次要嘅發展方向的內容</li>\n<li>以理論派嘅方式， 就係以研讀和理解的方式學習</li>\n<li>主要嘅發展方向的內容先多花時間以實戰方式進行</li>\n</ul>","filePath":"/Users/sunday/workspace/coding-sunday/source/_posts/insight/readings-11.md","slug":"readings-11"}}