{"title":"Rust - Day 2","date":"2016-06-10T00:00:00.000Z","categories":"Rust","__content":"<p>Rust support pattern matching, it save programmer lots of effort and make the code elegant</p>\n<h2 id=\"switchcaseandpatternmatching\">Switch-case and Pattern matching</h2>\n<p>Rust do not have \"switch case\" pattern, but we don't need a long chain of \"else if\". Rust using pattern matching instead.</p>\n<pre><code>match ch {\n    'a' =&gt; return 0,\n    'b' =&gt; return 1,\n    'c' =&gt; return 2,\n}\n</code></pre>\n<p>It is good to skip the <code>break</code> in other language, but the advantage is not only saving keystrokes. </p>\n<!-- more -->\n<p>Suppose we have a main loop, stop when user input exit. In javascript we need</p>\n<pre><code>while ( someCondition() ) {\n    var str = prompt();\n    var exit = false;\n    switch (str) {\n        case \"exit\" : \n            exit = true;\n            break;\n        default :\n            console.log('input exit to leave');\n    }\n    if (exit) {\n        break;\n    }\n}\n</code></pre>\n<p>But in Rust, we don't need to variable <code>exit</code>, we can break directly</p>\n<pre><code>while some_condition() {\n    let mut msg = String::new();\n    io::stdin().read_line(&amp;mut msg)\n        .expect(\"Failed to read line\");\n    match msg.trim() {\n        \"exit\" =&gt; break,\n        _ =&gt; println!(\"input exit to leave\")\n    };\n}\n</code></pre>\n<p>It is much simpler.</p>\n<h2 id=\"labeledloop\">labeled loop</h2>\n<p>Rust's labeled loop feature also make the control of nested loop easier.</p>\n<pre><code>'outer: for x in 0..10 {\n    'inner: for y in 0..10 {\n        if y == 3 { break 'outer; } // continues the loop over y\n        println!(\"x: {}, y: {}\", x, y);\n    }\n}\n</code></pre>\n<p>We can break the outer loop directly without using any flags.</p>\n<h2 id=\"remark\">Remark</h2>\n<p>It is quite suprising for Rust to have feature faciliating loops. I thought Rust is a functional language and not recommend using loops. It may be a performance concern.</p>","filePath":"/Users/sunday/workspace/coding-sunday/source/_posts/rust/day2.md","slug":"day-2"}