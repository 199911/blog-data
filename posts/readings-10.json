{"title":"文集十","permalink":"/readings-10","post":{"title":"文集十","language":"zh-tw","date":"2016-10-04T00:00:00.000Z","categories":"Insight","__content":"<h1 id=\"httpwwwinsidecomtw20140917managerswatchthemonkeyscarefully\"><a href=\"http://www.inside.com.tw/2014/09/17/managers-watch-the-monkeys-carefully\">當主管卻不懂交辦，當心「猴子」爬上身</a></h1>\n<p>文章將團隊成員分為五種不同層次，最低層次係要等人俾指示，最高就係可以獨立行動，間中做例行報告。要令員工可以獨立行動，需要時間累積信任。</p>\n<p>文中仲提及一D指派工作嘅技巧:</p>\n<ul>\n<li>要清楚指出工作內容</li>\n<li>可運用數字明確指出目標，促進員工思考</li>\n<li>盡力說動部屬願意做不樂意的事</li>\n<li>最好當然係每個人都做樂意做嘅野。但萬一冇人肯做，都要靠員工去補位</li>\n<li>用正確既方法去指派工作，文中提出4種</li>\n</ul>\n<ol>\n<li>直接告訴我你要我做什麼</li>\n<li>我希望你先考慮我的意見，再決定我要做什麼<ul>\n<li>員工可能想用新方法去解決問題</li></ul></li>\n<li>我想自己決定要做什麼<ul>\n<li>員工唔需要監督，係開波之前要搞清楚目標同方向</li></ul></li>\n<li>大家共同討論、決定之後，我就很樂意去做</li>\n</ol>\n<p>仲有三個指派工作嘅大忌</p>\n<ol>\n<li>指派太多工作</li>\n<li>有多過一個人落order</li>\n</ol>\n<ul>\n<li>會唔知做邊個task先，影響團隊信任</li>\n</ul>\n<ol>\n<li>把最困難的事，交給最有能力的人</li>\n</ol>\n<ul>\n<li>最重要都係cost and benefit</li>\n</ul>\n<!-- more -->\n<h1 id=\"httpteddychentwblogspothk201609blogpost_7html\"><a href=\"http://teddy-chen-tw.blogspot.hk/2016/09/blog-post_7.html\">小問題，大麻煩</a></h1>\n<p>做錯一D細嘅決定係短期內冇咩影響，但細嘅錯誤會慢慢累積成大嘅錯誤，最後做成technique debt。</p>\n<p>例如之前我落左係<code>&lt;ul&gt;</code>同<code>&lt;ol&gt;</code>嘅CSS落左一個CSS reset, 搞到post content D list冇曬style。最後係post content D CSS 做左個patch。但係就有其他engineer，因為個patch override左D style，搞到個page爛左。一個簡單嘅錯誤係三日內係唔同嘅地方做成2個bug，最後變成大問題。</p>\n<p>文中提出用pair programming 同 code review 去盡早fix左D小問題，但最終都係要有資深嘅engineer去identify到個問題。</p>\n<h1 id=\"choosedesignoverarchitecturehttps18fgsagov20151117choosedesignoverarchitecture\"><a href=\"https://18f.gsa.gov/2015/11/17/choose-design-over-architecture/\">Choose design over architecture</a></h1>\n<ul>\n<li>Conventional wisdom often encourages engineers to start with a big architectural overview, but this will introduce technical debt</li>\n<li>The overview make the service complex. The complexity in one service can take down the whole project<ul>\n<li>I guess it is because the service is an essential part of the whole system. All features will depends on the complex services</li></ul></li>\n<li>Architectural plans will push the team forward water fall model<ul>\n<li>I guess it is because the product can only be deployed after all infrastructure is ready</li></ul></li>\n<li>Focusing on user experience design and software design can help avoid technical debt.</li>\n<li>Start from small user story<ul>\n<li>Even a small story can involve a lot of effort for the engineers, as there are no infrastructure can be reuse.</li>\n<li>The set of stories will help engineers figure out what infrastructure is needed and the priorities.</li></ul></li>\n<li>After we have the requirements provided by user stories, we can break the features into modules and organize modules into services.<ul>\n<li>SOLID principle in OOP can help us design the system</li></ul></li>\n<li>Optimize for change</li>\n<li>Optimized code lead to an increase in defects and reduced velocity.<ul>\n<li>Rule of 3, consider to reuse code if it appear three times</li></ul></li>\n</ul>\n<p>Summary</p>\n<ul>\n<li>Get the infrastructure's requirement using product designer's mindset</li>\n<li>Organize the feature and model using architect mindset</li>\n</ul>\n<h1 id=\"readthisgoogleemailabouttimemanagementstrategyhttpswwwfastcompanycom3054571worksmartthebettertimemanagementstrategythisgooglertaughthiscoworkers\"><a href=\"https://www.fastcompany.com/3054571/work-smart/the-better-time-management-strategy-this-googler-taught-his-coworkers\">Read This Google Email About Time Management Strategy</a></h1>\n<p>The animation in video is impressive. It contains a few points:</p>\n<ul>\n<li>Meeting can have fewer people</li>\n<li>Remove unnecessary meeting</li>\n<li>Don't put all meeting on Friday, because the energy level is low</li>\n</ul>\n<h1 id=\"httpinsightsthoughtworkersorgobsessionogtechnology\"><a href=\"http://insights.thoughtworkers.org/obsession-og-technology/\">知识漩涡</a></h1>\n<p>太多新technology，好難追，但好多時都係大同小異。重點係理解可以通用嘅重點。文中提及分為兩種，第一種係零碎嘅資料，第二種係幫助提升理解力。後者往往比前者重要，但係要用好多心力先可以吸收。</p>\n<p>知識框架就係一種幫助理解資料嘅知識，而入邊specific 嘅 domain knowledge 就係資料。學野果時應嘅先廣後深，避免鑽得太深，明白整體之後，先揀得著最多嘅野，專心去學。如果只係不停去追新tech，冇深入了解，去到最後只係知左一堆好快outdate嘅資料，而唔係知識。</p>\n<p>小結：</p>\n<ul>\n<li>冇可能學曬所有野</li>\n<li>要先了解成個知識體系，避免鑽得太深</li>\n<li>揀最有價值嘅野深入研究</li>\n<li>對於得意但同自己發展方向冇關嘅野放係低D嘅priority，要識得放棄</li>\n</ul>","filePath":"/Users/sunday/workspace/coding-sunday/source/_posts/insight/readings-10.md","slug":"readings-10"}}