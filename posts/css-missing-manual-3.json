{"title":"\"CSS - the missing manual 2nd edition\" CSS Page Layout","date":"2016-11-20T00:00:00.000Z","categories":"Review","__content":"<p>This chapter have enough images to help reader understand the layout. I highly recommend to learn layout by reading this chapter</p>\n<h3 id=\"layouttype\">Layout type</h3>\n<ul>\n<li>Fixed width</li>\n<li>The <code>width</code> value is a fixed numerical value</li>\n<li>Fluid</li>\n<li>The <code>width</code> is a percentage value</li>\n<li>Responsive Web design (RWD)</li>\n<li>The layout change with the screen size</li>\n<li>The layout for different screen can be \"Fixed Width\" and \"Fluid\"</li>\n</ul>\n<!-- More -->\n<h3 id=\"commontechniqueforcsslayout\">Common technique for css layout</h3>\n<ul>\n<li>float (for different section)</li>\n<li>absolute positioning</li>\n</ul>\n<h3 id=\"whymobilefirst\">Why mobile first?</h3>\n<p>Limited screen size help us eliminate noise and focus on content</p>\n<h3 id=\"workflowondesign\">Workflow on design</h3>\n<p>In short, design from the highest abstraction layer to the lowest.</p>\n<ol>\n<li>Identify the layout first</li>\n</ol>\n<ul>\n<li>don't spend too much time on graphic and detail</li>\n</ul>\n<ol>\n<li>Identify different sections (boxes)</li>\n</ol>\n<ul>\n<li>Notice that the HTML element will take up all width by default. The size of column should be determined in step 1.</li>\n</ul>\n<ol>\n<li>Remember the background image</li>\n<li>Think about the implementation of layout</li>\n<li>Design the style of different element</li>\n<li>Determine the size of margins and padding</li>\n</ol>\n<h3 id=\"tofixitemsinsidefloatcontainerbreakoutside\">To fix items inside float container break outside</h3>\n<p>Four solutions:</p>\n<ul>\n<li>Add <code>clear: both;</code> element at the bottom inside the floating container</li>\n<li>Float the Item</li>\n<li>Add <code>overflow: hidden;</code></li>\n<li>Notice that if element is absolute positioned, it will not show up. (It is hidden)</li>\n<li>Use micro clear fix<ul>\n<li>Add <code>clear: both;</code> in pseudo element <code>::after</code></li>\n<li>Also <code>display: table;</code></li>\n<li>Bootstrap 3 use this technique</li></ul></li>\n</ul>\n<h3 id=\"usingtabletolayout\">Using table to layout</h3>\n<p>We can use multicolumn in CSS 3 instead</p>\n<ul>\n<li>Pros</li>\n<li>When you need to create columns with same height</li>\n<li>Cons</li>\n<li>Need to add html code</li>\n<li>difficult to change</li>\n<li>not work well in cellphone</li>\n</ul>\n<h3 id=\"float\">Float</h3>\n<ul>\n<li>height depends on content</li>\n<li>difficult to create full height column<ul>\n<li>Use a wrapper to wrap the main content (should be long enough) with the columns</li>\n<li>and then add background img with the same width and repeat vertically as the column in wrapper</li>\n<li>the column have back ground , but actually it is background of the wrapper</li></ul></li>\n<li>Float does not work with <code>position:fixed</code> or <code>position:absolute</code></li>\n</ul>\n<h3 id=\"positioningpropertiesleftrighttopandbottom\">Positioning properties (left, right, top and bottom)</h3>\n<ul>\n<li>Let browser calculate the size of element</li>\n<li>Specify both left and right / top and bottom</li>\n<li>I cannot come up with use case<ul>\n<li>may be using <code>vh</code> and <code>vw</code> already serve most of our needs</li>\n<li><code>calc()</code> give us more flexibility</li></ul></li>\n<li>Percentage values will not change the element's size</li>\n</ul>\n<h3 id=\"mediaquery\">Media query</h3>\n<p>Common usage:</p>\n<ul>\n<li>adjust column</li>\n<li>flexible width</li>\n<li>tighten up white space</li>\n<li>adjust font sizes</li>\n<li>change navigation menus</li>\n<li>convert nav bar to dropdown in mobile device</li>\n<li>hide content on handhold device</li>\n<li>use background image</li>\n</ul>\n<h2 id=\"flexbox\">Flexbox</h2>\n<h3 id=\"properties\">Properties</h3>\n<ul>\n<li><code>flex-direction</code></li>\n<li>usually use 'row' in desktop and switch to 'column' in mobile</li>\n<li><code>justify-content</code></li>\n<li>if flex widths is used, justify-content have no effect</li>\n<li><code>align-items</code></li>\n<li>default value: <code>stretch</code></li>\n<li>align baseline<ul>\n<li>align the first line of text</li></ul></li>\n<li><code>align-content only works when</code></li>\n<li>flex-wrap is wrap</li>\n<li>flex container must taller than the rows of flex items</li>\n<li>default value: <code>stretch</code></li>\n<li><code>order</code></li>\n<li>Solve the CSS negative margin to change the order (they want to put main content in HTML first for SEO)</li>\n<li><code>flex</code></li>\n<li>default values:<ul>\n<li>0 1 auto</li>\n<li>* 1 0% (if the first value is defined)</li>\n<li>what if * = 0?</li></ul></li>\n</ul>\n<h3 id=\"specialnote\">Special note</h3>\n<ul>\n<li>flex containers and items are not block level element</li>\n<li>Some properties don't apply to them</li>\n<li>flex items' margins don't collapse</li>\n<li>can auto take up all space -&gt; push left / right</li>\n<li>no-wrap + shrink 0 will make the item overflow\nwrap will make the item drop (if sum of flex-basic &gt; container width)</li>\n</ul>\n<h3 id=\"sizecalculation\">Size calculation</h3>\n<ul>\n<li>space difference = absolute( container size - sum of flex-basic of all items )</li>\n<li>when flex container &gt; sum of minimum size of items</li>\n<li>item's size = (flex-basic) + (flex-grow/sum of flex-grow) * (space difference)</li>\n<li>when flex container &lt; sum of minimum size of items</li>\n<li>item's size = (flex-basic) - (flex-grow/sum of flex-shrink) * (space difference)</li>\n</ul>\n<h3 id=\"flexbasicautoandflexbasiccontent\"><code>flex-basic: auto;</code> and <code>flex-basic: content;</code></h3>\n<p>According to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/flex-basis\">MDN</a>, <code>auto</code> can means \"look at my width or height property\" and \"automatic sizing\".\nAt the end:</p>\n<ul>\n<li><code>auto</code> means \"look at my width or height property\";</li>\n<li><code>content</code> keyword is introduced to trigger automatic sizing;</li>\n</ul>\n<h3 id=\"jargons\">Jargons</h3>\n<ul>\n<li>Float drops</li>\n<li>When there are not enough space, the column will drops down below the other</li>\n<li>Solution: Use box-sizing to define the column size precisely</li>\n<li>Frameset</li>\n<li>fixed component in certain place</li>\n<li>keep important fixtures handy</li>\n<li>can implement with html frame</li>\n<li>Breakpoint</li>\n<li>are the screen size value which trigger style change</li>\n<li>Flexible grid</li>\n<li>Bootstrap 3's grid system is an example</li>\n</ul>\n<h3 id=\"notes\">Notes</h3>\n<ul>\n<li>Don't add unnecessary div</li>\n<li>CSS built in grid layout</li>\n<li>But it is not ready</li>\n<li>There are lots of layout already, don't need to start from zero</li>\n<li>Search engine limited the amount of html crawl, it rank the content near the beginning higher score.</li>\n<li>I am not sure is it valid now</li>\n<li>Background image cannot be outside the element</li>\n<li>CSS layout difficulty</li>\n<li>Cannot fix the position and sizes, because user can change the screen size</li>\n<li>Can use <code>media</code> attribute in link tag to determine which style sheet to download</li>\n<li>Drawback of fluid image: force user to download a bigger image</li>\n<li>Don't add unit when the value is 0</li>\n</ul>\n<h3 id=\"toreadlist\">To read list</h3>\n<ul>\n<li>flexbox usage</li>\n<li>https://philipwalton.github.io/solved-by-flexbox/</li>\n<li>mobile first</li>\n<li>http://www.abookapart.com/products/mobile-first</li>\n<li>https://www.sitepoint.com/making-case-mobile-first-designs/</li>\n<li>For a good explanation of why floated elements can break outside of their containing blocks</li>\n<li>www.complexspiral.com/publications/containing-floats.</li>\n<li>Create full height column (sidebar) with float</li>\n<li>some other technique: http://css-tricks.com/fluid-width-equal-height-columns/</li>\n<li>http://webdesign.tutsplus.com/tutorials/quick-tip-solving-the-equal-height-column-conundrum--cms-20403</li>\n<li>Responsive image technique</li>\n<li>http://alistapart.com/article/responsive-images-in-practice</li>\n</ul>","filePath":"/Users/sunday/workspace/coding-sunday/source/_posts/review/CSS-missing-manual-3.md","slug":"css-missing-manual-3"}