{"title":"\"Professional: JavaScript for Web Developers, Third Edition\" part 2","date":"2017-03-18T00:00:00.000Z","categories":"Review","__content":"<p>In chapter 6, the book demonstrate how to control JavaScript object's property with its internal value. I think immuntable.js may make sure this techniques in implementation.\nIn chapter 7, is show some interest property in function object, but it is not accessible in strict mode, it is not very useful.\nIn chapter 9, this book explain how user agent evolve, and meaning of each component. It is quite interesting.</p>\n<!-- more -->\n<h1 id=\"chapter6objectorientedprogramming\">Chapter 6: Object-Oriented Programming</h1>\n<h2 id=\"internalvaluesofpropertyofobjects\">Internal values of property of objects</h2>\n<p><code>Object.defineProperty()</code> and <code>Object.defineProperties()</code> can change the internal value</p>\n<ul>\n<li>data attribute</li>\n<li>configurable</li>\n<li>enumerable</li>\n<li>writable</li>\n<li>value</li>\n<li>accessor attribute</li>\n<li>configurable</li>\n<li>enumerable</li>\n<li>get</li>\n<li>set</li>\n</ul>\n<h2 id=\"otherinformation\">Other Information</h2>\n<ul>\n<li><code>instanceof</code> check prototype chain</li>\n<li>constructor will create a new context, changing the <code>this</code> value</li>\n</ul>\n<h2 id=\"classinheritance\">Class Inheritance</h2>\n<p>The books spent lots of time to talk about implementation of class inheritance in JavaScript. I skipped it as ES6 have support <code>class</code>. What is the es5 equivalent of es6 class may be an interesting question.</p>\n<ul>\n<li>Prototype share all functions</li>\n<li>But access time is long</li>\n<li>In ECMAScript spec, prototype is internal object, but many browsers implement <code>__proto__</code></li>\n<li>Standard way to get prototype is <code>getPrototypeOf</code></li>\n<li><code>in</code> operator</li>\n<li><code>(name in object)</code> return true if the object have an index <code>name</code><ul>\n<li>no matter it is a instance property or prototype property</li></ul></li>\n<li>All native object use prototype</li>\n<li>Prototype and constructor can be different</li>\n<li>Drawback of prototype, can change inheritance during execution</li>\n<li>Although possible, it is not recommended to modify native object prototypes in a production environment.</li>\n<li>Share data value (especially array and object) in prototype can cause tricky bugs</li>\n<li>One solution is use constructor for data property, prototype for function property<ul>\n<li>I think we should stick to es6 class if possible, it is over-complicated to implement class in es5</li></ul></li>\n<li><code>return</code> statement in constructor can override the value return by constructor by default</li>\n</ul>\n<h1 id=\"chapter7functionexpressions\">Chapter 7: Function Expressions</h1>\n<ul>\n<li>Recursion</li>\n<li>callee vs function f() and f = function()<ul>\n<li>callee is not available in strict mode</li>\n<li>anonymous function fail if the function varaible changed</li>\n<li>as the recursion coerced to the variable</li>\n<li>Use named function in recursion</li></ul></li>\n<li>Anonymous function != closure</li>\n<li>Closures are functions that have access to variables from another function’s scope.</li>\n<li>Closures carry with them the containing function’s scope</li>\n<li>They take up more memory than other functions.</li>\n<li>It’s recommended you use them only when absolutely necessary.</li>\n<li>Beware which context do <code>this</code> refer to</li>\n<li>Can use closure to mimic block scope</li>\n<li><code>let</code> keyword in es6 create variable in block scope</li>\n</ul>\n<h1 id=\"chapter8thebrowserobjectmodel\">Chapter 8: The Browser Object Model</h1>\n<h2 id=\"windowandframe\">window and frame</h2>\n<ul>\n<li><p><code>window</code> in BOM is global in ECMAScript</p></li>\n<li><p>All frames have its own <code>window</code></p></li>\n<li><p>It means there are multiple global object, one object for one frame</p></li>\n<li><p><code>window.frames</code> store all <code>window</code> object for frames in this frame</p></li>\n<li><p><code>window</code> is current frame</p></li>\n<li><p>The <code>window.top</code> object always points to the very top (outermost) frame, which is the browser window itself.</p></li>\n<li><p>Root's <code>window.parent</code> is itself</p></li>\n<li><p><code>screenLeft</code> and <code>screenTop</code> give frame position information</p></li>\n<li><p><code>window.self</code> = <code>window</code></p></li>\n<li><p>Cross browser window position detection</p></li>\n<li><p>Check both screenLeft and screenX</p></li>\n<li><p>Is it standardized now?</p></li>\n<li><p>Window size</p></li>\n<li><p><code>window.innerWidth</code> and <code>document.body.clientWidth</code></p></li>\n<li><p>Is it standardized now?</p></li>\n</ul>\n<h2 id=\"popupwindow\">Pop up window</h2>\n<ul>\n<li><code>window.open()</code> can change the content of iframe.</li>\n<li>special windows' name <code>_self</code>, <code>_parent</code>, <code>_top</code>, or <code>_blank</code>.</li>\n<li>Also have lots of setting to control pop up window</li>\n<li><code>open()</code> return <code>null</code> if it is blocked by build-in pop up blocker</li>\n</ul>\n<h2 id=\"settimeout\">Set time out</h2>\n<ul>\n<li>Can accept string input instead of function</li>\n<li>but it is not recommended, because there are performance penalty</li>\n<li><code>this</code> in timeout callback refer to <code>window</code></li>\n<li>if <code>bind()</code> is not called</li>\n</ul>\n<h2 id=\"locationobject\">Location object</h2>\n<ul>\n<li><code>assign()</code> process the new url and add to history</li>\n<li>equivalent assign url to <code>window.location</code> and <code>location.href</code></li>\n<li>If you don't want to update history, use <code>replace()</code></li>\n<li><code>reload()</code> may load the page from browser cache</li>\n<li>use <code>reload(true)</code> to force browser to get a new page</li>\n</ul>\n<h2 id=\"navigatorobject\">Navigator object</h2>\n<ul>\n<li>usually for client detection</li>\n<li><code>appcodename</code> always return <code>mozilla</code></li>\n<li>Can detect plugin like flash shockwave</li>\n<li><code>registerContentHandler()</code> and <code>registerProtocolHandler()</code></li>\n<li>Don't know what is it</li>\n</ul>\n<h2 id=\"screenobject\"><code>screen</code> object</h2>\n<p>Is it standard? From MDN, seems in working draft</p>\n<h2 id=\"historyobject\"><code>history</code> object</h2>\n<p>It will refresh page, how web app work?</p>\n<ul>\n<li><code>go()</code></li>\n<li>integer / url string</li>\n<li><code>back()</code></li>\n<li><code>forward()</code></li>\n</ul>\n<h1 id=\"chapter9clientdetection\">Chapter 9: Client Detection</h1>\n<ul>\n<li>Capability detection</li>\n<li>Use JavaScripts to check<ul>\n<li>Make sure method exist and make sure the method is a function.</li>\n<li>But IE 8 have buggy <code>typeof</code>, sometimes return object instead of function</li>\n<li>We can use double NOT operator to produce a Boolean result<ul>\n<li>Which is more optimal to store and access</li></ul></li></ul></li>\n<li>Quirks Detection</li>\n<li>Detect browser bugs</li>\n<li>User-Agent Detection</li>\n<li>Identifying the rendering engine<ul>\n<li>The exact name and version of a browser isn’t as important as the rendering engine being used.</li></ul></li>\n<li>Detect platform is also useful<ul>\n<li>Notice that game systems have web browser now</li></ul></li>\n<li>Capability detection &gt; Quirks Detection &gt; User-Agent Detection</li>\n</ul>\n<h1 id=\"chapter10thedocumentobjectmodel\">Chapter 10: The Document Object Model</h1>\n<ul>\n<li>12 types of node, all of which inherit from a base type.</li>\n<li>Node.ELEMENT_NODE (1)</li>\n<li>Node.ATTRIBUTE_NODE (2)</li>\n<li>Node.TEXT_NODE (3)</li>\n<li>Node.CDATA<em>SECTION</em>NODE (4)</li>\n<li>Node.ENTITY<em>REFERENCE</em>NODE (5)</li>\n<li>Node.ENTITY_NODE (6)</li>\n<li>Node.PROCESSING<em>INSTRUCTION</em>NODE (7)</li>\n<li>Node.COMMENT_NODE (8)</li>\n<li>Node.DOCUMENT_NODE (9)</li>\n<li>Node.DOCUMENT<em>TYPE</em>NODE (10)</li>\n<li>Node.DOCUMENT<em>FRAGMENT</em>NODE (11)</li>\n<li>Node.NOTATION_NODE (12)</li>\n<li>Not all types are supported</li>\n</ul>\n<h2 id=\"nodeinterface\"><code>node</code> interface</h2>\n<ul>\n<li>Basic properties</li>\n<li>nodeName is tag name</li>\n<li>nodeValue is null (if element)</li>\n<li>Node relationship</li>\n<li>childNodes contain NodeList<ul>\n<li>NodeList is an array like object, but not instance of Array)</li></ul></li>\n<li>Node list is living, any change reflect directly</li>\n<li>Related properties<ul>\n<li><code>parentNode</code></li>\n<li><code>previousSibling</code></li>\n<li><code>nextSibling</code></li>\n<li><code>firstChild</code></li>\n<li><code>lastChild</code></li>\n<li><code>hasChildNodes()</code></li></ul></li>\n<li>One final relationship is shared by every node.<ul>\n<li>The <code>ownerDocument</code> property is a pointer to the document node that represents the entire document.</li></ul></li>\n<li>Manipulating Nodes</li>\n<li>DOM node exist at most one location in a document</li>\n<li><code>appendChild()</code>, which adds a node to the end of the childNodes list<ul>\n<li>It does not create new node, it move node.</li></ul></li>\n<li><code>insertBefore()</code></li>\n<li><code>replaceChild()</code></li>\n<li><code>removeChild()</code></li>\n<li><code>cloneNode()</code><ul>\n<li>It only copy attributes and, optionally, child nodes.</li>\n<li>Event handlers are not cloned</li></ul></li>\n<li><code>normalize()</code><ul>\n<li>Merge text node and remove empty text node</li></ul></li>\n</ul>\n<h2 id=\"documentnode\">Document node</h2>\n<ul>\n<li>Can be accessed by <code>window.document</code></li>\n<li><code>nodeType</code> is 9.</li>\n<li><code>nodeName</code> is \"#document\".</li>\n<li><code>parentNode</code> is null.</li>\n<li><code>ownerDocument</code> is null.</li>\n<li><code>document.documentElement</code>, which always points to the <html> element in an HTML page.</li>\n<li><code>document.body</code></li>\n<li><code>document.doctype</code><ul>\n<li>Inconsistent browser support</li></ul></li>\n<li>Useful properties<ul>\n<li><code>title</code>, <code>URL</code>, <code>domain</code>, and <code>referrer</code></li>\n<li>The ability to set document.domain is useful when there is a frame or iframe on the page from a different subdomain.</li>\n<li>Pages from different subdomains can’t communicate with one another via JavaScript because of cross-domain security restrictions.<ul>\n<li>By setting document.domain in each page to the same value, the pages can access JavaScript objects from each other.</li></ul></li></ul></li>\n<li><code>document.getElementById()</code></li>\n<li><code>document.getElementsByTagName()</code><ul>\n<li>Tag names are case insensitive for html, but sensitive for xml and xhtml</li></ul></li>\n<li>Special collections<ul>\n<li><code>document.anchors</code></li>\n<li><code>document.applets</code></li>\n<li><code>document.forms</code></li>\n<li><code>document.images</code></li>\n<li><code>document.links</code></li></ul></li>\n<li>DOM Conformance Detection<ul>\n<li><code>document.implementation.hasFeature()</code></li>\n<li>Browser vendor may not implement the feature correctly</li>\n<li>This is not very reliable</li></ul></li>\n<li><code>document.write()</code><ul>\n<li>Write content to document directly</li></ul></li>\n</ul>\n<h2 id=\"inlinescriptinjection\">Inline script injection</h2>\n<p>Beware cannot have string contains <code>'&lt;/script&gt;'</code>, it will be parsed as close tag of javascript. We need to escape <code>/</code>, like <code>'&lt;\\/script&gt;'</code></p>\n<p>Document writing is not supported in strict XHTML documents. For pages that are served with the application/xml+xhtml content type, these methods will not work.</p>\n<h2 id=\"elementnode\">Element node</h2>\n<ul>\n<li><code>nodeType</code> is 1.</li>\n<li><code>nodeName</code> is the element’s tag name.</li>\n<li><code>nodeValue</code> is null.</li>\n<li><code>parentNode</code> may be a Document or Element.</li>\n<li><code>nodeName</code> is always in uppercase</li>\n<li>Standard attributes</li>\n<li><code>id</code>, <code>title</code>, <code>lang</code>, <code>dir</code>, <code>className</code><ul>\n<li><code>dir</code> is the direction of language, can be <code>ltr</code> or <code>rtl</code></li>\n<li><code>className</code> is <code>class</code> attributes in HTML</li>\n<li><code>class</code> is not used in JavaScript because it is reserved word</li></ul></li>\n<li>There are lots of subtype for element node, each represent a HTML tag</li>\n<li><code>style</code> object is not living (change not directly reflect)</li>\n<li><code>element.attributes</code> is living</li>\n<li><code>NameNodeMap</code> type</li>\n<li><code>getNamedItem(name)</code> — Returns the node whose <code>nodeName</code> property is equal to <code>name</code>.</li>\n<li><code>removeNamedItem(</code>name<code>)</code> — Removes the node whose <code>nodeName</code> property is equal to name from the list.</li>\n<li><code>setNamedItem(node)</code> — Adds the <code>node</code> to the list, indexing it by its <code>nodeName</code> property.</li>\n<li><code>item(pos)</code> — Returns the node in the numerical position <code>pos</code>.</li>\n</ul>\n<h2 id=\"textnode\">Text node</h2>\n<ul>\n<li><code>nodeType</code> is 3.</li>\n<li><code>nodeName</code> is \"#text\".</li>\n<li><code>nodeValue</code> is text contained in the node.</li>\n<li>Child nodes are not supported.</li>\n<li><code>appendData(text)</code> — Appends text to the end of the node.</li>\n<li><code>deleteData(offset, count)</code> — Deletes count number of characters starting at position offset.</li>\n<li><code>insertData(offset, text)</code> — Inserts text at position offset.</li>\n<li><code>replaceData(offset, count, text)</code> — Replaces the text starting at offset through offset + count with text.</li>\n<li><code>splitText(offset)</code> — Splits the text node into two text nodes separated at position offset.</li>\n<li><code>substringData(offset, count)</code> — Extracts a string from the text beginning at position offset and continuing until offset + count.</li>\n<li>length property return the length of text</li>\n<li>The special characters add to text node by method is automatically escaped</li>\n<li><code>parentNode.normalize()</code> merge the adjacent children or remove empty text node</li>\n</ul>\n<h2 id=\"commentnode\">Comment node</h2>\n<ul>\n<li><code>nodeType</code> is 8.</li>\n<li><code>nodeName</code> is \"#comment\".</li>\n<li><code>nodeValue</code> is the content of the comment.</li>\n<li><code>parentNode</code> is a Document or Element.</li>\n<li>Child nodes are not supported.</li>\n<li>Inherit from text node, having the methods.</li>\n<li>can access text by <code>node.data</code></li>\n<li>Browsers don’t recognize comments that exist after the closing </html> tag.</li>\n</ul>\n<h2 id=\"cdatasection\">CDATASection</h2>\n<p>CDATA sections are specific to XML-based documents</p>\n<ul>\n<li><code>nodeType</code> is 4.</li>\n<li><code>nodeName</code> is \"#cdata-section\".</li>\n<li><code>nodeValue</code> is the contents of the CDATA section.</li>\n<li><code>parentNode</code> is a Document or Element.</li>\n<li>Child nodes are not supported.</li>\n<li>Also inherit form text node</li>\n<li>CDATA sections are valid only in XML documents</li>\n<li>So most browsers will incorrectly parse a CDATA section into either a Comment or an Element.</li>\n</ul>\n<h2 id=\"documenttype\">DocumentType</h2>\n<ul>\n<li><code>nodeType</code> is 10.</li>\n<li><code>nodeName</code> is the name of the doctype.</li>\n<li><code>nodeValue</code> is null.</li>\n<li><code>parentNode</code> is a Document.</li>\n<li>Child nodes are not supported.</li>\n<li>Cannot be create by code in DOM level 1</li>\n<li>Only the <code>name</code> property is useful in html and xhtml, <code>entities</code> and <code>notations</code> are empty</li>\n</ul>\n<h2 id=\"thedocumentfragmenttype\">The DocumentFragment Type</h2>\n<ul>\n<li><code>nodeType</code> is 11.</li>\n<li><code>nodeName</code> is \"#document-fragment\".</li>\n<li><code>nodeValue</code> is null.</li>\n<li><code>parentNode</code> is null.</li>\n<li>No representation in markup</li>\n<li>Cannot be add to document directly</li>\n<li>For render performance</li>\n<li>Can create a document fragment with multiple element to prevent live update of each insertion<ul>\n<li>In another word, we can achieve batch update with doucment fragment</li></ul></li>\n</ul>\n<h2 id=\"attrtype\">Attr type</h2>\n<ul>\n<li><code>nodeType</code> is 11.</li>\n<li><code>nodeName</code> is the attribute name.</li>\n<li><code>nodeValue</code> is the attribute value.</li>\n<li><code>parentNode</code> is null.</li>\n<li>Child nodes are not supported in HTML.</li>\n<li>Child nodes may be Text or EntityReference in XML.</li>\n<li>Exist in an element’s attributes property.</li>\n<li>But not considered part of the DOM document tree</li>\n<li>There are three properties on an Attr object:<ul>\n<li><code>name</code>, which is the attribute name (same as nodeName)</li>\n<li><code>value</code>, which is the attribute value (same as nodeValue)</li>\n<li><code>specified</code> always return <code>true</code></li></ul></li>\n<li>From <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Attr\">MDN</a>, attribute node no longer inherit from node in DOM 4\n-The <code>getAttribute()</code>, <code>setAttribute()</code>, and <code>removeAttribute()</code> methods are preferable over manipulating attribute nodes.</li>\n<li>Custom properties does not show up in object, need to use <code>getAttribute()</code></li>\n<li>Attribute names get normalized to lowercase when set using <code>setAttribute()</code></li>\n</ul>\n<h2 id=\"manipulatingtables\">Manipulating Tables</h2>\n<p>There are methods to make create table element easier</p>\n<h2 id=\"elementtraversal\">Element Traversal</h2>\n<p>There are new properties and methods to help us access sibling, children elements and number of children elements (not include comment and text node)</p>","filePath":"/Users/sunday/workspace/coding-sunday/source/_posts/review/professional-javascript-for-web-developers-3rd-edition-2.md","slug":"professional-javascript-for-web-developers-3rd-edition-2"}