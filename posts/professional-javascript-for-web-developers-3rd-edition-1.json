{"title":"\"Professional: JavaScript for Web Developers, Third Edition\" part 1","date":"2017-03-14T00:00:00.000Z","categories":"Review","__content":"<p>This books is published on 2012, some information is outdated. But it is still a good start to get deeper understand on javascript, not only the language itself, also the implementation in different browsers. The book spent certain pages to explain the workaround in IE, we can just skip them. This book skips some JavaScript specification which does not implemented by any browser (at that time). We may need to get up-to-date information from other place</p>\n<!-- more -->\n<h1 id=\"chapter1whatisjavascript\">Chapter 1: What is JavaScript?</h1>\n<ul>\n<li>ECMAScript != JavaScript</li>\n<li>ECMAScript is part of JavaScript</li>\n<li>JavaScript include<ul>\n<li>The Core (ECMAScript)</li>\n<li>The Document Object Model</li>\n<li>The Browser Object Model</li></ul></li>\n</ul>\n<h2 id=\"thedocumentobjectmodel\">The Document Object Model</h2>\n<ul>\n<li>DOM provides methods and interfaces for working with the content of a web page</li>\n<li>Allow programmer change the page appearance without reload the page</li>\n<li>DOM is also implement in other language</li>\n<li>DOM levels</li>\n<li>Level 1<ul>\n<li>DOM core: map xml based document to data structure which is easy to access</li>\n<li>Should be DOM tree, but I don't know does it provide extra feature</li>\n<li>DOM HTML: extended DOM core by adding HTML-specific objects and method</li></ul></li>\n<li>Level 2<ul>\n<li>DOM View</li>\n<li>DOM Events</li>\n<li>DOM style</li>\n<li>DOM Traversal and Range</li></ul></li>\n<li>Level 3<ul>\n<li>DOM Load and Save</li>\n<li>DOM Validation</li>\n<li>Extended DOM core to support all XML 1.0</li></ul></li>\n<li>Other DOMs</li>\n<li>SVG</li>\n<li>MathML</li>\n<li>Synchronized Multimedia Integration Language (SMIL)</li>\n</ul>\n<h2 id=\"thebrowserobjectmodelbom\">The Browser Object Model (BOM)</h2>\n<ul>\n<li>BOM provides methods and interfaces for interacting with the browser</li>\n<li>pop up new windows</li>\n<li>move, resize and close browser windows</li>\n<li><code>navigator</code> object</li>\n<li><code>location</code> object</li>\n<li>It is not standardize for a long time, until HTML5</li>\n</ul>\n<h1 id=\"chapter2javascriptinhtml\">Chapter 2: JavaScript in HTML</h1>\n<ul>\n<li>Traditionally, we put JavaScript on header</li>\n<li>It is download and parsed before content (blocking)</li>\n<li>Use <code>async</code> and <code>defer</code> attributes in <code>&lt;script&gt;</code></li>\n<li>Or put it at the end of body, so the html content is parsed first</li>\n</ul>\n<h2 id=\"defer\">Defer</h2>\n<ul>\n<li>The purpose of defer is to indicate that a script won’t be changing the structure of the page as it executes.</li>\n<li>Even the HTML5 specific defer script will run in order, but this may not happen in real world.</li>\n<li>So keep at most one defer script</li>\n<li>Script can be loaded before DOMContentLoaded</li>\n</ul>\n<h2 id=\"async\">Async</h2>\n<ul>\n<li>async, run immediately after download, can run before or after DOMContentloaded, but guaranteed before loaded</li>\n</ul>\n<h2 id=\"inlinescriptinxhtml\">Inline script in XHTML</h2>\n<ul>\n<li>Less than sign make in script tag make XHTML broken, as it is consider as an open tag</li>\n<li>Use &lt;</li>\n<li>Use CDATA section</li>\n</ul>\n<h2 id=\"externalscriptisbetter\">External script is better</h2>\n<ul>\n<li>Maintainable</li>\n<li>Caching</li>\n<li>Future-proof</li>\n<li>Don't need to use the hack for XHTML</li>\n<li>Same script work in both HTML and XTHML</li>\n</ul>\n<h1 id=\"chapter3languagebasics\">Chapter 3: Language Basics</h1>\n<ul>\n<li>variable not declared by <code>var</code> will be global</li>\n<li><code>typeof</code> null return <code>object</code></li>\n<li><code>typeof</code> regex is object (chrome 7 have a bug, which return function)</li>\n<li>variable not declared !== undefined variable</li>\n<li>using variables not declared throw error (reference error)</li>\n<li><code>typeof</code> variables not declared return undefined</li>\n</ul>\n<h2 id=\"number\">Number</h2>\n<ul>\n<li>octal number start with 0</li>\n<li>octal number is invalid in strict mode</li>\n<li>octal number can be tricky: 078-077 = 15</li>\n<li>number large than max value or small than smallest value will become (negative) infinity</li>\n<li><code>typeof</code> NaN is number</li>\n<li>NaN will make the computation return NaN</li>\n<li>NaN not equal to any value</li>\n<li>so we have to use isNaN()</li>\n</ul>\n<h2 id=\"numbervsparserint\">Number vs Parser Int</h2>\n<ul>\n<li>be careful when parsing number with leading 0</li>\n<li>number start with 0 will be consider as octal number</li>\n<li>always include 10 in second parameter</li>\n</ul>\n<h2 id=\"builtinobjectmethod\">Built in object method</h2>\n<ul>\n<li><code>null</code> and <code>undefined</code> don't have toString()</li>\n<li><code>String()</code> alway return string, it is good when you don't know the value whether null or undefined</li>\n<li>Can also convert to string by concatenating empty string</li>\n<li>I think it is more straight forward.</li>\n<li><code>hasOwnProperty('propertyName')</code> checks the property exist (do not check prototype)</li>\n<li><code>propertyIsEnumerable('propertyName')</code>, whether can use for-in</li>\n<li><code>toLocateString()</code> return localization string</li>\n<li><code>valueOf()</code>, <code>toString()</code> will be called if apply operator on object</li>\n</ul>\n<p><strong>Notice that BOM and DOM is not included in ES standard, they may or may not follow the ES object standard</strong></p>\n<h2 id=\"other\">Other</h2>\n<ul>\n<li>bitwise operator</li>\n<li>value converted to number by Number() (32 bit numbers)</li>\n<li><code>arguments</code> is an array-like object, but it is not array</li>\n<li>string is not object in JavaScript, unlike other language</li>\n<li>ECMA-262 specifies that any object implementing the internal [[Call]] method should return “function” from typeof</li>\n<li>user defined <code>call()</code> seems does not works</li>\n</ul>\n<h1 id=\"chapter4variablesscopeandmemory\">Chapter 4: Variables, Scope, and Memory</h1>\n<ul>\n<li>In browser, global context = windows</li>\n<li>5 types of scope in browser</li>\n<li>global, function, eval(), catch block, with block</li>\n<li>browser optimized variable look up, don't worry about access variable from different scope</li>\n<li>Circular reference no longer leak memory, in browser</li>\n<li>Garbage collect can be trigger by code in some browser, but it is not recommended</li>\n<li>Release memory by dereference them (set variable to null)</li>\n</ul>\n<h1 id=\"chapter5referencetypes\">Chapter 5 Reference Types</h1>\n<ul>\n<li>Function interface<ul>\n<li>The best approach is to use named arguments for those that are required arguments</li>\n<li>And an object literal to encompass multiple optional arguments.</li></ul></li>\n<li>Use <code>{}</code> and <code>[]</code> create object and array, the <code>Object()</code> and <code>Array()</code> constructor is not called</li>\n<li>Arrays can contain a maximum of 4,294,967,295 items.</li>\n<li>If you try to add more than that number, an exception occurs.</li>\n<li>A long-running script error may be thrown before you reach the arrays' maximum.</li>\n<li><code>instanceof</code> assumes a single global execution context.</li>\n<li>Different frames in a web page haves distinct global execution contexts and therefore two versions of the Array constructor.</li>\n<li>If you were to pass an array from one frame into a second frame, that array has a different constructor function than an array created natively in the second frame.</li>\n<li>To solve this problem, ECMAScript 5 introduced the Array.isArray() method</li>\n<li><code>toString()</code> of date object of different browser return stings with different format</li>\n<li>use string to define regex, need to escape the slash as it is escape character in string (not regex)</li>\n<li><code>source</code> property in regex object does not have slash</li>\n<li>Better not to use string to create REGEX</li>\n<li>function constructor is not recommended, as it caused performance issue.</li>\n<li>strict mode does not support <code>callee</code> and <code>caller</code></li>\n<li>Using <code>arguments.callee</code> can decouple recursive functions</li>\n<li><code>arguments.callee.caller</code> return parent function</li>\n<li><code>length</code> property of a function is # of named arguments</li>\n<li>In strict mode, the <code>this</code> value of a function called without a context object is not coerced to window.</li>\n<li><code>this</code> becomes undefined unless explicitly set by either attaching the function to an object or using apply() or call().</li>\n<li>Primitive type cannot have custom properties</li>\n<li>Can workaround by using constructor to create primitive type wrapper<ul>\n<li><code>var j = new Number(1234);</code></li></ul></li>\n<li><code>typeof</code> return Object for primitive type wrapper</li>\n<li>There was method to format HTML dynamically, but it is not implemented by browsers now.</li>\n<li>Singleton object</li>\n<li>global scope and Math</li>\n<li>In strict mode, the variable created in eval() cannot be access from outside</li>\n</ul>","filePath":"/Users/sunday/workspace/coding-sunday/source/_posts/review/professional-javascript-for-web-developers-3rd-edition-1.md","slug":"professional-javascript-for-web-developers-3rd-edition-1"}