{"title":"Review of \"the mythical man month\" chapter 2","permalink":"/posts/the-mythical-man-month-2","post":{"title":"Review of \"the mythical man month\" chapter 2","date":"2016-08-20T00:00:00.000Z","categories":"Review","__content":"<p>Why it is difficult to estimate the time cost of a software project?</p>\n<h2 id=\"fivereasons\">Five reasons</h2>\n<ol>\n<li>Programmers are optimist, tends to underestimate the time cost.</li>\n<li>Having assumption that man and months are interchangeable.</li>\n<li>Software managers have less inherent courage and firmness.</li>\n<li>Schedule process is poorly monitored. Technique and routine from other engineering does not work in software engineering, programming is some sense in a creativity activity.</li>\n<li>When the schedule is lagged behind, more man power is added, which make the situation delay worser.</li>\n</ol>\n<h3 id=\"whyprogrammersareoptimist\">Why programmers are optimist?</h3>\n<p>The time cost of debugging and testing cannot be estimated until or after implementation. Programmer usually ignore the time cost of that.</p>\n<!-- more -->\n<h4 id=\"whywecannotestimatedthetimeneedtobedebug\">Why we cannot estimated the time need to be debug?</h4>\n<p>Before move on to the question, we need to understand the nature of programming first. Programming is more likely human creative activities, which can be divided into three stages:</p>\n<ol>\n<li>The idea</li>\n<li>The implementation</li>\n<li>The interaction</li>\n</ol>\n<p>All programmers try to make sure the idea are perfect before implementation. In reality, it is impossible. The incompleteness and inconsistencies become clearly only during implementation. It means we don't know the bugs exist before implementation. How can we estimate the time required to fix and test the bugs?</p>\n<h4 id=\"itisverydifficulttohaveprogramwithoutbugs\">It is very difficult to have program without bugs</h4>\n<p>A large programming effort consists of many tasks chained end-to-end. Even the probability of tasks to have bug is small, the probability to have whole program bug free is vanishingly small.</p>\n<h3 id=\"whymanandmonthsarenotinterchangeable\">Why man and months are not interchangeable</h3>\n<p>The task can be divided into four types.</p>\n<ol>\n<li>Tasks can be partitioned among many workers with no communication among them.</li>\n</ol>\n<ul>\n<li>The months required is decrease logarithmically. When there are infinity many workers, the months required tend to zero.</li>\n</ul>\n<ol>\n<li>Tasks cannot be partitioned because of sequential constraints.</li>\n</ol>\n<ul>\n<li>The months required is constants, independent from the number of workers.</li>\n<li>Many software tasks have this characteristic because of the nature of debugging</li>\n</ul>\n<ol>\n<li>Tasks can be partitioned but require communication like training</li>\n</ol>\n<ul>\n<li>It is type one plus type two. The months required logarithmically decrease to a constants  when number of worker increase.</li>\n</ul>\n<ol>\n<li>Tasks can be partitioned but require intercommunication</li>\n</ol>\n<ul>\n<li>The communication cost increase with the number of workers. The months required decrease logarithmically. When the number of workers increase further, the communication cost dominated and the months require increase with the number of workers.</li>\n</ul>\n<h3 id=\"softwaremanagersneedinherentcourageandfirmness\">Software managers need inherent courage and firmness.</h3>\n<p>Software project are difficult to estimate. When the project fall behind the schedule, manager need to have courage and firmness to postpone the deadline and explain this to the patron. A software project is difficult to speed up.</p>\n<h3 id=\"brooksslaw\">Brooks's Law -</h3>\n<blockquote>\n  <p>Adding manpower to a late software project makes it later.</p>\n</blockquote>\n<p>Software tasks are usually type four task, the communication cost will dominated after the team grow to a certain size.</p>\n<h2 id=\"ruleofthumbforscheduling\">Rule of thumb for scheduling</h2>\n<ul>\n<li>1/6 for coding</li>\n<li>1/3 for planning</li>\n<li>1/4 for component test and early system test</li>\n<li>1/4 for system test, all components in hand</li>\n</ul>\n<p>The coding time is the easiest to estimate.</p>","filePath":"/Users/sunday/workspace/coding-sunday/source/_posts/review/the-mythical-man-month-2.md","slug":"the-mythical-man-month-2"}}