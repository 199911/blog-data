[{"title":"\"Professional: JavaScript for Web Developers, Third Edition\" part 1","date":"2017-03-14T00:00:00.000Z","categories":"Review","__content":"<p>This books is published on 2012, some information is outdated. But it is still a good start to get deeper understand on javascript, not only the language itself, also the implementation in different browsers. The book spent certain pages to explain the workaround in IE, we can just skip them. This book skips some JavaScript specification which does not implemented by any browser (at that time). We may need to get up-to-date information from other place</p>\n<!-- more -->\n<h1 id=\"chapter1whatisjavascript\">Chapter 1: What is JavaScript?</h1>\n<ul>\n<li>ECMAScript != JavaScript</li>\n<li>ECMAScript is part of JavaScript</li>\n<li>JavaScript include<ul>\n<li>The Core (ECMAScript)</li>\n<li>The Document Object Model</li>\n<li>The Browser Object Model</li></ul></li>\n</ul>\n<h2 id=\"thedocumentobjectmodel\">The Document Object Model</h2>\n<ul>\n<li>DOM provides methods and interfaces for working with the content of a web page</li>\n<li>Allow programmer change the page appearance without reload the page</li>\n<li>DOM is also implement in other language</li>\n<li>DOM levels</li>\n<li>Level 1<ul>\n<li>DOM core: map xml based document to data structure which is easy to access</li>\n<li>Should be DOM tree, but I don't know does it provide extra feature</li>\n<li>DOM HTML: extended DOM core by adding HTML-specific objects and method</li></ul></li>\n<li>Level 2<ul>\n<li>DOM View</li>\n<li>DOM Events</li>\n<li>DOM style</li>\n<li>DOM Traversal and Range</li></ul></li>\n<li>Level 3<ul>\n<li>DOM Load and Save</li>\n<li>DOM Validation</li>\n<li>Extended DOM core to support all XML 1.0</li></ul></li>\n<li>Other DOMs</li>\n<li>SVG</li>\n<li>MathML</li>\n<li>Synchronized Multimedia Integration Language (SMIL)</li>\n</ul>\n<h2 id=\"thebrowserobjectmodelbom\">The Browser Object Model (BOM)</h2>\n<ul>\n<li>BOM provides methods and interfaces for interacting with the browser</li>\n<li>pop up new windows</li>\n<li>move, resize and close browser windows</li>\n<li><code>navigator</code> object</li>\n<li><code>location</code> object</li>\n<li>It is not standardize for a long time, until HTML5</li>\n</ul>\n<h1 id=\"chapter2javascriptinhtml\">Chapter 2: JavaScript in HTML</h1>\n<ul>\n<li>Traditionally, we put JavaScript on header</li>\n<li>It is download and parsed before content (blocking)</li>\n<li>Use <code>async</code> and <code>defer</code> attributes in <code>&lt;script&gt;</code></li>\n<li>Or put it at the end of body, so the html content is parsed first</li>\n</ul>\n<h2 id=\"defer\">Defer</h2>\n<ul>\n<li>The purpose of defer is to indicate that a script won’t be changing the structure of the page as it executes.</li>\n<li>Even the HTML5 specific defer script will run in order, but this may not happen in real world.</li>\n<li>So keep at most one defer script</li>\n<li>Script can be loaded before DOMContentLoaded</li>\n</ul>\n<h2 id=\"async\">Async</h2>\n<ul>\n<li>async, run immediately after download, can run before or after DOMContentloaded, but guaranteed before loaded</li>\n</ul>\n<h2 id=\"inlinescriptinxhtml\">Inline script in XHTML</h2>\n<ul>\n<li>Less than sign make in script tag make XHTML broken, as it is consider as an open tag</li>\n<li>Use &lt;</li>\n<li>Use CDATA section</li>\n</ul>\n<h2 id=\"externalscriptisbetter\">External script is better</h2>\n<ul>\n<li>Maintainable</li>\n<li>Caching</li>\n<li>Future-proof</li>\n<li>Don't need to use the hack for XHTML</li>\n<li>Same script work in both HTML and XTHML</li>\n</ul>\n<h1 id=\"chapter3languagebasics\">Chapter 3: Language Basics</h1>\n<ul>\n<li>variable not declared by <code>var</code> will be global</li>\n<li><code>typeof</code> null return <code>object</code></li>\n<li><code>typeof</code> regex is object (chrome 7 have a bug, which return function)</li>\n<li>variable not declared !== undefined variable</li>\n<li>using variables not declared throw error (reference error)</li>\n<li><code>typeof</code> variables not declared return undefined</li>\n</ul>\n<h2 id=\"number\">Number</h2>\n<ul>\n<li>octal number start with 0</li>\n<li>octal number is invalid in strict mode</li>\n<li>octal number can be tricky: 078-077 = 15</li>\n<li>number large than max value or small than smallest value will become (negative) infinity</li>\n<li><code>typeof</code> NaN is number</li>\n<li>NaN will make the computation return NaN</li>\n<li>NaN not equal to any value</li>\n<li>so we have to use isNaN()</li>\n</ul>\n<h2 id=\"numbervsparserint\">Number vs Parser Int</h2>\n<ul>\n<li>be careful when parsing number with leading 0</li>\n<li>number start with 0 will be consider as octal number</li>\n<li>always include 10 in second parameter</li>\n</ul>\n<h2 id=\"builtinobjectmethod\">Built in object method</h2>\n<ul>\n<li><code>null</code> and <code>undefined</code> don't have toString()</li>\n<li><code>String()</code> alway return string, it is good when you don't know the value whether null or undefined</li>\n<li>Can also convert to string by concatenating empty string</li>\n<li>I think it is more straight forward.</li>\n<li><code>hasOwnProperty('propertyName')</code> checks the property exist (do not check prototype)</li>\n<li><code>propertyIsEnumerable('propertyName')</code>, whether can use for-in</li>\n<li><code>toLocateString()</code> return localization string</li>\n<li><code>valueOf()</code>, <code>toString()</code> will be called if apply operator on object</li>\n</ul>\n<p><strong>Notice that BOM and DOM is not included in ES standard, they may or may not follow the ES object standard</strong></p>\n<h2 id=\"other\">Other</h2>\n<ul>\n<li>bitwise operator</li>\n<li>value converted to number by Number() (32 bit numbers)</li>\n<li><code>arguments</code> is an array-like object, but it is not array</li>\n<li>string is not object in JavaScript, unlike other language</li>\n<li>ECMA-262 specifies that any object implementing the internal [[Call]] method should return “function” from typeof</li>\n<li>user defined <code>call()</code> seems does not works</li>\n</ul>\n<h1 id=\"chapter4variablesscopeandmemory\">Chapter 4: Variables, Scope, and Memory</h1>\n<ul>\n<li>In browser, global context = windows</li>\n<li>5 types of scope in browser</li>\n<li>global, function, eval(), catch block, with block</li>\n<li>browser optimized variable look up, don't worry about access variable from different scope</li>\n<li>Circular reference no longer leak memory, in browser</li>\n<li>Garbage collect can be trigger by code in some browser, but it is not recommended</li>\n<li>Release memory by dereference them (set variable to null)</li>\n</ul>\n<h1 id=\"chapter5referencetypes\">Chapter 5 Reference Types</h1>\n<ul>\n<li>Function interface<ul>\n<li>The best approach is to use named arguments for those that are required arguments</li>\n<li>And an object literal to encompass multiple optional arguments.</li></ul></li>\n<li>Use <code>{}</code> and <code>[]</code> create object and array, the <code>Object()</code> and <code>Array()</code> constructor is not called</li>\n<li>Arrays can contain a maximum of 4,294,967,295 items.</li>\n<li>If you try to add more than that number, an exception occurs.</li>\n<li>A long-running script error may be thrown before you reach the arrays' maximum.</li>\n<li><code>instanceof</code> assumes a single global execution context.</li>\n<li>Different frames in a web page haves distinct global execution contexts and therefore two versions of the Array constructor.</li>\n<li>If you were to pass an array from one frame into a second frame, that array has a different constructor function than an array created natively in the second frame.</li>\n<li>To solve this problem, ECMAScript 5 introduced the Array.isArray() method</li>\n<li><code>toString()</code> of date object of different browser return stings with different format</li>\n<li>use string to define regex, need to escape the slash as it is escape character in string (not regex)</li>\n<li><code>source</code> property in regex object does not have slash</li>\n<li>Better not to use string to create REGEX</li>\n<li>function constructor is not recommended, as it caused performance issue.</li>\n<li>strict mode does not support <code>callee</code> and <code>caller</code></li>\n<li>Using <code>arguments.callee</code> can decouple recursive functions</li>\n<li><code>arguments.callee.caller</code> return parent function</li>\n<li><code>length</code> property of a function is # of named arguments</li>\n<li>In strict mode, the <code>this</code> value of a function called without a context object is not coerced to window.</li>\n<li><code>this</code> becomes undefined unless explicitly set by either attaching the function to an object or using apply() or call().</li>\n<li>Primitive type cannot have custom properties</li>\n<li>Can workaround by using constructor to create primitive type wrapper<ul>\n<li><code>var j = new Number(1234);</code></li></ul></li>\n<li><code>typeof</code> return Object for primitive type wrapper</li>\n<li>There was method to format HTML dynamically, but it is not implemented by browsers now.</li>\n<li>Singleton object</li>\n<li>global scope and Math</li>\n<li>In strict mode, the variable created in eval() cannot be access from outside</li>\n</ul>","filePath":"/Users/sunday/workspace/coding-sunday/source/_posts/review/professional-javascript-for-web-developers-3rd-edition-1.md","slug":"professional-javascript-for-web-developers-3rd-edition-1"},{"title":"\"Professional: JavaScript for Web Developers, Third Edition\" part 2","date":"2017-03-18T00:00:00.000Z","categories":"Review","__content":"<p>In chapter 6, the book demonstrate how to control JavaScript object's property with its internal value. I think immuntable.js may make sure this techniques in implementation.\nIn chapter 7, is show some interest property in function object, but it is not accessible in strict mode, it is not very useful.\nIn chapter 9, this book explain how user agent evolve, and meaning of each component. It is quite interesting.</p>\n<!-- more -->\n<h1 id=\"chapter6objectorientedprogramming\">Chapter 6: Object-Oriented Programming</h1>\n<h2 id=\"internalvaluesofpropertyofobjects\">Internal values of property of objects</h2>\n<p><code>Object.defineProperty()</code> and <code>Object.defineProperties()</code> can change the internal value</p>\n<ul>\n<li>data attribute</li>\n<li>configurable</li>\n<li>enumerable</li>\n<li>writable</li>\n<li>value</li>\n<li>accessor attribute</li>\n<li>configurable</li>\n<li>enumerable</li>\n<li>get</li>\n<li>set</li>\n</ul>\n<h2 id=\"otherinformation\">Other Information</h2>\n<ul>\n<li><code>instanceof</code> check prototype chain</li>\n<li>constructor will create a new context, changing the <code>this</code> value</li>\n</ul>\n<h2 id=\"classinheritance\">Class Inheritance</h2>\n<p>The books spent lots of time to talk about implementation of class inheritance in JavaScript. I skipped it as ES6 have support <code>class</code>. What is the es5 equivalent of es6 class may be an interesting question.</p>\n<ul>\n<li>Prototype share all functions</li>\n<li>But access time is long</li>\n<li>In ECMAScript spec, prototype is internal object, but many browsers implement <code>__proto__</code></li>\n<li>Standard way to get prototype is <code>getPrototypeOf</code></li>\n<li><code>in</code> operator</li>\n<li><code>(name in object)</code> return true if the object have an index <code>name</code><ul>\n<li>no matter it is a instance property or prototype property</li></ul></li>\n<li>All native object use prototype</li>\n<li>Prototype and constructor can be different</li>\n<li>Drawback of prototype, can change inheritance during execution</li>\n<li>Although possible, it is not recommended to modify native object prototypes in a production environment.</li>\n<li>Share data value (especially array and object) in prototype can cause tricky bugs</li>\n<li>One solution is use constructor for data property, prototype for function property<ul>\n<li>I think we should stick to es6 class if possible, it is over-complicated to implement class in es5</li></ul></li>\n<li><code>return</code> statement in constructor can override the value return by constructor by default</li>\n</ul>\n<h1 id=\"chapter7functionexpressions\">Chapter 7: Function Expressions</h1>\n<ul>\n<li>Recursion</li>\n<li>callee vs function f() and f = function()<ul>\n<li>callee is not available in strict mode</li>\n<li>anonymous function fail if the function varaible changed</li>\n<li>as the recursion coerced to the variable</li>\n<li>Use named function in recursion</li></ul></li>\n<li>Anonymous function != closure</li>\n<li>Closures are functions that have access to variables from another function’s scope.</li>\n<li>Closures carry with them the containing function’s scope</li>\n<li>They take up more memory than other functions.</li>\n<li>It’s recommended you use them only when absolutely necessary.</li>\n<li>Beware which context do <code>this</code> refer to</li>\n<li>Can use closure to mimic block scope</li>\n<li><code>let</code> keyword in es6 create variable in block scope</li>\n</ul>\n<h1 id=\"chapter8thebrowserobjectmodel\">Chapter 8: The Browser Object Model</h1>\n<h2 id=\"windowandframe\">window and frame</h2>\n<ul>\n<li><p><code>window</code> in BOM is global in ECMAScript</p></li>\n<li><p>All frames have its own <code>window</code></p></li>\n<li><p>It means there are multiple global object, one object for one frame</p></li>\n<li><p><code>window.frames</code> store all <code>window</code> object for frames in this frame</p></li>\n<li><p><code>window</code> is current frame</p></li>\n<li><p>The <code>window.top</code> object always points to the very top (outermost) frame, which is the browser window itself.</p></li>\n<li><p>Root's <code>window.parent</code> is itself</p></li>\n<li><p><code>screenLeft</code> and <code>screenTop</code> give frame position information</p></li>\n<li><p><code>window.self</code> = <code>window</code></p></li>\n<li><p>Cross browser window position detection</p></li>\n<li><p>Check both screenLeft and screenX</p></li>\n<li><p>Is it standardized now?</p></li>\n<li><p>Window size</p></li>\n<li><p><code>window.innerWidth</code> and <code>document.body.clientWidth</code></p></li>\n<li><p>Is it standardized now?</p></li>\n</ul>\n<h2 id=\"popupwindow\">Pop up window</h2>\n<ul>\n<li><code>window.open()</code> can change the content of iframe.</li>\n<li>special windows' name <code>_self</code>, <code>_parent</code>, <code>_top</code>, or <code>_blank</code>.</li>\n<li>Also have lots of setting to control pop up window</li>\n<li><code>open()</code> return <code>null</code> if it is blocked by build-in pop up blocker</li>\n</ul>\n<h2 id=\"settimeout\">Set time out</h2>\n<ul>\n<li>Can accept string input instead of function</li>\n<li>but it is not recommended, because there are performance penalty</li>\n<li><code>this</code> in timeout callback refer to <code>window</code></li>\n<li>if <code>bind()</code> is not called</li>\n</ul>\n<h2 id=\"locationobject\">Location object</h2>\n<ul>\n<li><code>assign()</code> process the new url and add to history</li>\n<li>equivalent assign url to <code>window.location</code> and <code>location.href</code></li>\n<li>If you don't want to update history, use <code>replace()</code></li>\n<li><code>reload()</code> may load the page from browser cache</li>\n<li>use <code>reload(true)</code> to force browser to get a new page</li>\n</ul>\n<h2 id=\"navigatorobject\">Navigator object</h2>\n<ul>\n<li>usually for client detection</li>\n<li><code>appcodename</code> always return <code>mozilla</code></li>\n<li>Can detect plugin like flash shockwave</li>\n<li><code>registerContentHandler()</code> and <code>registerProtocolHandler()</code></li>\n<li>Don't know what is it</li>\n</ul>\n<h2 id=\"screenobject\"><code>screen</code> object</h2>\n<p>Is it standard? From MDN, seems in working draft</p>\n<h2 id=\"historyobject\"><code>history</code> object</h2>\n<p>It will refresh page, how web app work?</p>\n<ul>\n<li><code>go()</code></li>\n<li>integer / url string</li>\n<li><code>back()</code></li>\n<li><code>forward()</code></li>\n</ul>\n<h1 id=\"chapter9clientdetection\">Chapter 9: Client Detection</h1>\n<ul>\n<li>Capability detection</li>\n<li>Use JavaScripts to check<ul>\n<li>Make sure method exist and make sure the method is a function.</li>\n<li>But IE 8 have buggy <code>typeof</code>, sometimes return object instead of function</li>\n<li>We can use double NOT operator to produce a Boolean result<ul>\n<li>Which is more optimal to store and access</li></ul></li></ul></li>\n<li>Quirks Detection</li>\n<li>Detect browser bugs</li>\n<li>User-Agent Detection</li>\n<li>Identifying the rendering engine<ul>\n<li>The exact name and version of a browser isn’t as important as the rendering engine being used.</li></ul></li>\n<li>Detect platform is also useful<ul>\n<li>Notice that game systems have web browser now</li></ul></li>\n<li>Capability detection &gt; Quirks Detection &gt; User-Agent Detection</li>\n</ul>\n<h1 id=\"chapter10thedocumentobjectmodel\">Chapter 10: The Document Object Model</h1>\n<ul>\n<li>12 types of node, all of which inherit from a base type.</li>\n<li>Node.ELEMENT_NODE (1)</li>\n<li>Node.ATTRIBUTE_NODE (2)</li>\n<li>Node.TEXT_NODE (3)</li>\n<li>Node.CDATA<em>SECTION</em>NODE (4)</li>\n<li>Node.ENTITY<em>REFERENCE</em>NODE (5)</li>\n<li>Node.ENTITY_NODE (6)</li>\n<li>Node.PROCESSING<em>INSTRUCTION</em>NODE (7)</li>\n<li>Node.COMMENT_NODE (8)</li>\n<li>Node.DOCUMENT_NODE (9)</li>\n<li>Node.DOCUMENT<em>TYPE</em>NODE (10)</li>\n<li>Node.DOCUMENT<em>FRAGMENT</em>NODE (11)</li>\n<li>Node.NOTATION_NODE (12)</li>\n<li>Not all types are supported</li>\n</ul>\n<h2 id=\"nodeinterface\"><code>node</code> interface</h2>\n<ul>\n<li>Basic properties</li>\n<li>nodeName is tag name</li>\n<li>nodeValue is null (if element)</li>\n<li>Node relationship</li>\n<li>childNodes contain NodeList<ul>\n<li>NodeList is an array like object, but not instance of Array)</li></ul></li>\n<li>Node list is living, any change reflect directly</li>\n<li>Related properties<ul>\n<li><code>parentNode</code></li>\n<li><code>previousSibling</code></li>\n<li><code>nextSibling</code></li>\n<li><code>firstChild</code></li>\n<li><code>lastChild</code></li>\n<li><code>hasChildNodes()</code></li></ul></li>\n<li>One final relationship is shared by every node.<ul>\n<li>The <code>ownerDocument</code> property is a pointer to the document node that represents the entire document.</li></ul></li>\n<li>Manipulating Nodes</li>\n<li>DOM node exist at most one location in a document</li>\n<li><code>appendChild()</code>, which adds a node to the end of the childNodes list<ul>\n<li>It does not create new node, it move node.</li></ul></li>\n<li><code>insertBefore()</code></li>\n<li><code>replaceChild()</code></li>\n<li><code>removeChild()</code></li>\n<li><code>cloneNode()</code><ul>\n<li>It only copy attributes and, optionally, child nodes.</li>\n<li>Event handlers are not cloned</li></ul></li>\n<li><code>normalize()</code><ul>\n<li>Merge text node and remove empty text node</li></ul></li>\n</ul>\n<h2 id=\"documentnode\">Document node</h2>\n<ul>\n<li>Can be accessed by <code>window.document</code></li>\n<li><code>nodeType</code> is 9.</li>\n<li><code>nodeName</code> is \"#document\".</li>\n<li><code>parentNode</code> is null.</li>\n<li><code>ownerDocument</code> is null.</li>\n<li><code>document.documentElement</code>, which always points to the <html> element in an HTML page.</li>\n<li><code>document.body</code></li>\n<li><code>document.doctype</code><ul>\n<li>Inconsistent browser support</li></ul></li>\n<li>Useful properties<ul>\n<li><code>title</code>, <code>URL</code>, <code>domain</code>, and <code>referrer</code></li>\n<li>The ability to set document.domain is useful when there is a frame or iframe on the page from a different subdomain.</li>\n<li>Pages from different subdomains can’t communicate with one another via JavaScript because of cross-domain security restrictions.<ul>\n<li>By setting document.domain in each page to the same value, the pages can access JavaScript objects from each other.</li></ul></li></ul></li>\n<li><code>document.getElementById()</code></li>\n<li><code>document.getElementsByTagName()</code><ul>\n<li>Tag names are case insensitive for html, but sensitive for xml and xhtml</li></ul></li>\n<li>Special collections<ul>\n<li><code>document.anchors</code></li>\n<li><code>document.applets</code></li>\n<li><code>document.forms</code></li>\n<li><code>document.images</code></li>\n<li><code>document.links</code></li></ul></li>\n<li>DOM Conformance Detection<ul>\n<li><code>document.implementation.hasFeature()</code></li>\n<li>Browser vendor may not implement the feature correctly</li>\n<li>This is not very reliable</li></ul></li>\n<li><code>document.write()</code><ul>\n<li>Write content to document directly</li></ul></li>\n</ul>\n<h2 id=\"inlinescriptinjection\">Inline script injection</h2>\n<p>Beware cannot have string contains <code>'&lt;/script&gt;'</code>, it will be parsed as close tag of javascript. We need to escape <code>/</code>, like <code>'&lt;\\/script&gt;'</code></p>\n<p>Document writing is not supported in strict XHTML documents. For pages that are served with the application/xml+xhtml content type, these methods will not work.</p>\n<h2 id=\"elementnode\">Element node</h2>\n<ul>\n<li><code>nodeType</code> is 1.</li>\n<li><code>nodeName</code> is the element’s tag name.</li>\n<li><code>nodeValue</code> is null.</li>\n<li><code>parentNode</code> may be a Document or Element.</li>\n<li><code>nodeName</code> is always in uppercase</li>\n<li>Standard attributes</li>\n<li><code>id</code>, <code>title</code>, <code>lang</code>, <code>dir</code>, <code>className</code><ul>\n<li><code>dir</code> is the direction of language, can be <code>ltr</code> or <code>rtl</code></li>\n<li><code>className</code> is <code>class</code> attributes in HTML</li>\n<li><code>class</code> is not used in JavaScript because it is reserved word</li></ul></li>\n<li>There are lots of subtype for element node, each represent a HTML tag</li>\n<li><code>style</code> object is not living (change not directly reflect)</li>\n<li><code>element.attributes</code> is living</li>\n<li><code>NameNodeMap</code> type</li>\n<li><code>getNamedItem(name)</code> — Returns the node whose <code>nodeName</code> property is equal to <code>name</code>.</li>\n<li><code>removeNamedItem(</code>name<code>)</code> — Removes the node whose <code>nodeName</code> property is equal to name from the list.</li>\n<li><code>setNamedItem(node)</code> — Adds the <code>node</code> to the list, indexing it by its <code>nodeName</code> property.</li>\n<li><code>item(pos)</code> — Returns the node in the numerical position <code>pos</code>.</li>\n</ul>\n<h2 id=\"textnode\">Text node</h2>\n<ul>\n<li><code>nodeType</code> is 3.</li>\n<li><code>nodeName</code> is \"#text\".</li>\n<li><code>nodeValue</code> is text contained in the node.</li>\n<li>Child nodes are not supported.</li>\n<li><code>appendData(text)</code> — Appends text to the end of the node.</li>\n<li><code>deleteData(offset, count)</code> — Deletes count number of characters starting at position offset.</li>\n<li><code>insertData(offset, text)</code> — Inserts text at position offset.</li>\n<li><code>replaceData(offset, count, text)</code> — Replaces the text starting at offset through offset + count with text.</li>\n<li><code>splitText(offset)</code> — Splits the text node into two text nodes separated at position offset.</li>\n<li><code>substringData(offset, count)</code> — Extracts a string from the text beginning at position offset and continuing until offset + count.</li>\n<li>length property return the length of text</li>\n<li>The special characters add to text node by method is automatically escaped</li>\n<li><code>parentNode.normalize()</code> merge the adjacent children or remove empty text node</li>\n</ul>\n<h2 id=\"commentnode\">Comment node</h2>\n<ul>\n<li><code>nodeType</code> is 8.</li>\n<li><code>nodeName</code> is \"#comment\".</li>\n<li><code>nodeValue</code> is the content of the comment.</li>\n<li><code>parentNode</code> is a Document or Element.</li>\n<li>Child nodes are not supported.</li>\n<li>Inherit from text node, having the methods.</li>\n<li>can access text by <code>node.data</code></li>\n<li>Browsers don’t recognize comments that exist after the closing </html> tag.</li>\n</ul>\n<h2 id=\"cdatasection\">CDATASection</h2>\n<p>CDATA sections are specific to XML-based documents</p>\n<ul>\n<li><code>nodeType</code> is 4.</li>\n<li><code>nodeName</code> is \"#cdata-section\".</li>\n<li><code>nodeValue</code> is the contents of the CDATA section.</li>\n<li><code>parentNode</code> is a Document or Element.</li>\n<li>Child nodes are not supported.</li>\n<li>Also inherit form text node</li>\n<li>CDATA sections are valid only in XML documents</li>\n<li>So most browsers will incorrectly parse a CDATA section into either a Comment or an Element.</li>\n</ul>\n<h2 id=\"documenttype\">DocumentType</h2>\n<ul>\n<li><code>nodeType</code> is 10.</li>\n<li><code>nodeName</code> is the name of the doctype.</li>\n<li><code>nodeValue</code> is null.</li>\n<li><code>parentNode</code> is a Document.</li>\n<li>Child nodes are not supported.</li>\n<li>Cannot be create by code in DOM level 1</li>\n<li>Only the <code>name</code> property is useful in html and xhtml, <code>entities</code> and <code>notations</code> are empty</li>\n</ul>\n<h2 id=\"thedocumentfragmenttype\">The DocumentFragment Type</h2>\n<ul>\n<li><code>nodeType</code> is 11.</li>\n<li><code>nodeName</code> is \"#document-fragment\".</li>\n<li><code>nodeValue</code> is null.</li>\n<li><code>parentNode</code> is null.</li>\n<li>No representation in markup</li>\n<li>Cannot be add to document directly</li>\n<li>For render performance</li>\n<li>Can create a document fragment with multiple element to prevent live update of each insertion<ul>\n<li>In another word, we can achieve batch update with doucment fragment</li></ul></li>\n</ul>\n<h2 id=\"attrtype\">Attr type</h2>\n<ul>\n<li><code>nodeType</code> is 11.</li>\n<li><code>nodeName</code> is the attribute name.</li>\n<li><code>nodeValue</code> is the attribute value.</li>\n<li><code>parentNode</code> is null.</li>\n<li>Child nodes are not supported in HTML.</li>\n<li>Child nodes may be Text or EntityReference in XML.</li>\n<li>Exist in an element’s attributes property.</li>\n<li>But not considered part of the DOM document tree</li>\n<li>There are three properties on an Attr object:<ul>\n<li><code>name</code>, which is the attribute name (same as nodeName)</li>\n<li><code>value</code>, which is the attribute value (same as nodeValue)</li>\n<li><code>specified</code> always return <code>true</code></li></ul></li>\n<li>From <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Attr\">MDN</a>, attribute node no longer inherit from node in DOM 4\n-The <code>getAttribute()</code>, <code>setAttribute()</code>, and <code>removeAttribute()</code> methods are preferable over manipulating attribute nodes.</li>\n<li>Custom properties does not show up in object, need to use <code>getAttribute()</code></li>\n<li>Attribute names get normalized to lowercase when set using <code>setAttribute()</code></li>\n</ul>\n<h2 id=\"manipulatingtables\">Manipulating Tables</h2>\n<p>There are methods to make create table element easier</p>\n<h2 id=\"elementtraversal\">Element Traversal</h2>\n<p>There are new properties and methods to help us access sibling, children elements and number of children elements (not include comment and text node)</p>","filePath":"/Users/sunday/workspace/coding-sunday/source/_posts/review/professional-javascript-for-web-developers-3rd-edition-2.md","slug":"professional-javascript-for-web-developers-3rd-edition-2"},{"title":"文集十四","language":"zh-tw","date":"2017-03-26T00:00:00.000Z","categories":"Insight","__content":"<p>除左technical reading之外，仲睇左幾本\"一分鐘閱讀\"入邊推薦嘅書</p>\n<h2 id=\"csscustompropertiesthebasicshttpssgomesposts20170127csscustompropertiesthebasics\"><a href=\"https://sgom.es/posts/2017-01-27-css-custom-properties-the-basics/\">CSS Custom Properties - The Basics</a></h2>\n<p>CSS Custom value is variable in CSS. Use CSS selector to define scope. <code>:root</code> means global.\nCan use with <code>calc()</code>\nNote: it is not support by most popular version of browsers.\nCan use with JS: <code>styles.getPropertyValue(property)</code> and <code>styles.setProperty()</code></p>\n<h2 id=\"windowwindowmeasuringscreensizeswithjavascripthttpthenewcodecom1181windowwindowmeasuringscreensizeswithjavascript\"><a href=\"http://thenewcode.com/1181/Window-Window-Measuring-Screen-Sizes-with-JavaScript\">Window, Window: Measuring Screen Sizes with JavaScript</a></h2>\n<ul>\n<li>The viewport is the display area of the browser</li>\n<li>It does not include the URL bar and browser UI.</li>\n<li><code>document.documentElement.clientWidth</code> not included scroll bar, but <code>window.innerWidth</code> include.</li>\n<li>So is height</li>\n<li>Better to take max of these two value.</li>\n<li>The screen is the current display the browser is in</li>\n<li>note that many devices can have more than one screen.</li>\n<li>Need to recalculate screen size when <code>resize</code> and <code>orientationchange</code> fired</li>\n</ul>\n<!-- more -->\n<h2 id=\"\">钝感力</h2>\n<p>幾有意思，有部份例子唔太認同。但係不為瑣事動搖嘅能力的確係一種重要才能。</p>\n<h2 id=\"-1\">發掘你的太陽魔力</h2>\n<p>以半小說形式介紹太陽劇團嘅人員點樣保持熱情，keep住創新。</p>\n<h2 id=\"it\">嗨! 我是和尚。東大IT僧侶修行日記</h2>\n<p>E 本書顛覆我對佛教嘅印象，估唔到日本嘅佛教可以咁有活力，會有人肯創新，借出佛寺搞音樂會，開上網cafe，令佛教追上時代。作者唔係佛教世家，作為一個外人進入佛教世界，特別多思考，相當有趣。文中有唔少金句。</p>\n<blockquote>\n  <p>如果不是出自作者內心，已經成為其身上血肉的語言，是無法被衆人之耳聽進去的。</p>\n  <p>並非「原因必然導致結果」，而是「事出必有因」</p>\n  <p>對於靠著金錢的支援來建構的人生而感到安心，這種狀態其實是最危險的。假使我們難得生而為人，卻放棄生而為人應該以多面相的感性來品嘗人生，而活在金錢這種空虛的安全感之中度日，這樣的人生才叫做充滿風險的人生。\n  「我身為出家人，就必須將我的天線伸往各種不同的方向來磨練我的感性才行」\n  我們並不應該遇到任何事都直接用很正面積極去接納並且一概認為都是好的，而是要更加珍惜這種愕然的感覺，然後從正面去超越。\n  旅行的高手則是無論在哪裡都能夠找到自己的地方，當作自己的家一樣悠閒自在，一旦成了旅行達人，則會發現全世界沒有任何一個自己不可以落腳的地方。</p>\n</blockquote>\n<p>PS：原來日本政府係導入議院內閣制之前，用佛教集團本願寺做體制實驗</p>","filePath":"/Users/sunday/workspace/coding-sunday/source/_posts/insight/readings-14.md","slug":"readings-14"},{"title":"文集十五","language":"zh-tw","date":"2017-04-16T00:00:00.000Z","categories":"Insight","__content":"<h2 id=\"regularexpressionsinapostes6worldhttpsponyfoocomarticlesregularexpressionspostes6\"><a href=\"https://ponyfoo.com/articles/regular-expressions-post-es6\">Regular Expressions in a post-ES6 world</a></h2>\n<ul>\n<li>Sticky group</li>\n<li>I don't use regex a lot, don't know how much can this feature helps</li>\n<li>Better support of Unicode</li>\n<li>Regex match group with key</li>\n<li>Easier to read the regex</li>\n<li>Lookbehind assertion</li>\n<li>I don't even know what is lookahead assertion.</li>\n</ul>\n<h2 id=\"scalabledesignbeyondresponsivedesignhttpsmediumcomjulienetienne_beyondresponsivedesignf51ee2a9bfd\"><a href=\"https://medium.com/@julienetienne_/beyond-responsive-design-f51ee2a9bfd\">Scalable Design: Beyond Responsive Design</a></h2>\n<p><code>vh</code> and <code>vw</code> units make zoom function fail (as the view port does not change)\nThe article introduce a library to solve responsive font problem: https://github.com/julienetie/mimetic\nSeems the requirement is to use <code>rem</code> for fonts.</p>\n<!-- more -->\n<h2 id=\"runtimecoverageusingchromedevtoolshttpsgideonpyzercomblogruntimecoverageusingchromedevtools\"><a href=\"https://gideonpyzer.com/blog/runtime-coverage-using-chrome-devtools/\">Runtime Coverage using Chrome DevTools</a></h2>\n<p>Can use code coverage as a indicator for network optimization. If the percentage of unused bytes in the code is high, it suggests that the end user is having to download a lot more than is necessary to run the app.</p>\n<h2 id=\"11waystoinvokeafunctionhttpsgistgithubcommyshov05800f083a0afce56e0f782314a103eb\"><a href=\"https://gist.github.com/myshov/05800f083a0afce56e0f782314a103eb\">11 Ways to Invoke a Function</a></h2>\n<ul>\n<li>What is <code>Reflect</code>?</li>\n<li>https://www.keithcirkel.co.uk/metaprogramming-in-es6-part-2-reflect/</li>\n<li>A collection of js internal method.</li>\n<li>Easy to extend</li>\n<li>Better backward compatibility</li>\n<li>What is <code>require('vm').Script</code></li>\n<li>Node.js lib</li>\n</ul>\n<h2 id=\"game\">以Game載道</h2>\n<p>無意中係圖書館見到E本書，於是就借左黎睇。入邊最深刻就係遊戲係sell緊content同experience，同報紙雜誌一樣係一個媒體。甚至可以做到教化作用。</p>","filePath":"/Users/sunday/workspace/coding-sunday/source/_posts/insight/readings-15.md","slug":"readings-15"},{"title":"文集十六","language":"zh-tw","date":"2017-04-17T00:00:00.000Z","categories":"Insight","__content":"<h2 id=\"releasingprettier10httpjlongstercomprettier10\"><a href=\"http://jlongster.com/prettier-1.0\">Releasing Prettier 1.0</a></h2>\n<p>好似幾方面，冇學過compiler，唔識implement AST。原來compiler D theory 可以咁apply。</p>\n<h2 id=\"sealingjavascriptobjectsusingobjectsealhttpstechshardcom20170416sealingjavascriptobjectsusingobjectseal\"><a href=\"https://techshard.com/2017/04/16/sealing-javascript-objects-using-object-seal/\">Sealing JavaScript Objects using Object.seal()</a></h2>\n<p><code>Object.seal()</code> is not making the object immutable, even no new properties can be added, properties can be updated.\nWe can use <code>Object.freeze()</code>, but notice the nested object inside is not frozen.</p>\n<h2 id=\"debuggingtipsandtrickshttpscsstrickscomdebuggingtipstricks\"><a href=\"https://css-tricks.com/debugging-tips-tricks/\">Debugging Tips and Tricks</a></h2>\n<p>Very useful</p>\n<ul>\n<li>Calling <code>debugger;</code> in code will pause the code execution</li>\n<li><code>console.dir()</code> can log and interactive list</li>\n<li>Responsive image linter: https://github.com/ausi/respimagelint</li>\n<li>Accessibility extension: https://chrome.google.com/webstore/detail/axe/lhdoppojpmngadmnindnejefpokejbdd</li>\n<li>Dev tips: https://umaar.com/dev-tips/</li>\n<li>Mobile browser console: http://eruda.liriliri.io/</li>\n</ul>\n<h2 id=\"howtosafelyenablewordpresssvgsupporthttpskinstacomblogwordpresssvg\"><a href=\"https://kinsta.com/blog/wordpress-svg/\">How to Safely Enable WordPress SVG Support</a></h2>\n<p>Svg is an XML file, content need to be sanitized to prevent security problems.</p>\n<h2 id=\"httpswebkitorgblog7497releasenotesforsafaritechnologypreview27\"><a href=\"https://webkit.org/blog/7497/release-notes-for-safari-technology-preview-27/\"></a></h2>\n<p>Unprefixed intrinsic sizing keyword, <code>max-content</code>, <code>min-content</code>, but this value does not support in IE. Still cannot be used in production</p>\n<h2 id=\"httpscsstrickscombetweenthelines\"><a href=\"https://css-tricks.com/between-the-lines/\"></a></h2>\n<p>Use <code>calc()</code> with linear interpolation to make smooth responsive design. Very good effect if use with <code>rem</code></p>","filePath":"/Users/sunday/workspace/coding-sunday/source/_posts/insight/readings-16.md","slug":"readings-16"}]